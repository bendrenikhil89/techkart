[{"D:\\React\\techkart\\client\\src\\index.js":"1","D:\\React\\techkart\\client\\src\\reportWebVitals.js":"2","D:\\React\\techkart\\client\\src\\App.js":"3","D:\\React\\techkart\\client\\src\\components\\Navbar\\Navbar.js":"4","D:\\React\\techkart\\client\\src\\components\\Auth\\Login\\Login.js":"5","D:\\React\\techkart\\client\\src\\components\\Auth\\SignUp\\SignUp.js":"6","D:\\React\\techkart\\client\\src\\utils\\auth-util.js":"7","D:\\React\\techkart\\client\\src\\components\\Auth\\Confirmation\\Confirmation.js":"8","D:\\React\\techkart\\client\\src\\Reducers\\index.js":"9","D:\\React\\techkart\\client\\src\\Reducers\\userReducer.js":"10","D:\\React\\techkart\\client\\src\\components\\LoadingSpinner\\LoadingSpinner.js":"11","D:\\React\\techkart\\client\\src\\components\\AdminDashboard\\AdminLeftNav.js":"12","D:\\React\\techkart\\client\\src\\components\\Routes\\AdminRoute.js":"13","D:\\React\\techkart\\client\\src\\components\\Routes\\UserRoute.js":"14","D:\\React\\techkart\\client\\src\\pages\\ManageSubCategories.js":"15","D:\\React\\techkart\\client\\src\\pages\\ManageProducts.js":"16","D:\\React\\techkart\\client\\src\\pages\\ManageBannerImages.js":"17","D:\\React\\techkart\\client\\src\\utils\\categories-util.js":"18","D:\\React\\techkart\\client\\src\\utils\\subcategories-util.js":"19","D:\\React\\techkart\\client\\src\\components\\FileUpload\\FileUpload.js":"20","D:\\React\\techkart\\client\\src\\utils\\bannerImages-util.js":"21","D:\\React\\techkart\\client\\src\\utils\\product-util.js":"22","D:\\React\\techkart\\client\\src\\components\\Forms\\ProductForm.js":"23","D:\\React\\techkart\\client\\src\\components\\Forms\\CategoryForm.js":"24","D:\\React\\techkart\\client\\src\\components\\Forms\\SubCategoryForm.js":"25","D:\\React\\techkart\\client\\src\\components\\Auth\\PasswordReset\\PasswordReset.js":"26","D:\\React\\techkart\\client\\src\\components\\Auth\\PasswordReset\\ForgotPassword.js":"27","D:\\React\\techkart\\client\\src\\pages\\ManageCategories.js":"28","D:\\React\\techkart\\client\\src\\pages\\Dashboard.js":"29","D:\\React\\techkart\\client\\src\\Hooks\\useWindowDimensions.js":"30","D:\\React\\techkart\\client\\src\\components\\SiteFooter\\SiteFooter.js":"31","D:\\React\\techkart\\client\\src\\components\\Card\\ProductCard\\ProductCard.js":"32","D:\\React\\techkart\\client\\src\\components\\Card\\FooterCard\\FooterCard.js":"33","D:\\React\\techkart\\client\\src\\pages\\ProductPage.js":"34","D:\\React\\techkart\\client\\src\\Reducers\\searchReducer.js":"35","D:\\React\\techkart\\client\\src\\pages\\Shop.js":"36","D:\\React\\techkart\\client\\src\\Reducers\\cartReducer.js":"37","D:\\React\\techkart\\client\\src\\pages\\Cart.js":"38","D:\\React\\techkart\\client\\src\\Reducers\\drawerReducer.js":"39","D:\\React\\techkart\\client\\src\\components\\CartDrawer\\CartDrawer.js":"40","D:\\React\\techkart\\client\\src\\pages\\Checkout.js":"41","D:\\React\\techkart\\client\\src\\utils\\user-util.js":"42","D:\\React\\techkart\\client\\src\\components\\Forms\\AddressForm.js":"43","D:\\React\\techkart\\client\\src\\components\\StepWizard\\StepWizard.js":"44","D:\\React\\techkart\\client\\src\\pages\\Payment.js":"45","D:\\React\\techkart\\client\\src\\components\\StripeCheckout\\StripeCheckout.js":"46","D:\\React\\techkart\\client\\src\\utils\\stripe-util.js":"47","D:\\React\\techkart\\client\\src\\utils\\order-util.js":"48","D:\\React\\techkart\\client\\src\\pages\\Orders.js":"49","D:\\React\\techkart\\client\\src\\components\\LeftNav\\LeftNav.js":"50","D:\\React\\techkart\\client\\src\\pages\\UpdatePassword.js":"51","D:\\React\\techkart\\client\\src\\pages\\Wishlist.js":"52","D:\\React\\techkart\\client\\src\\pages\\Profile.js":"53","D:\\React\\techkart\\client\\src\\pages\\ManageOrders.js":"54","D:\\React\\techkart\\client\\src\\components\\ScrollToTop\\ScrollToTop.js":"55"},{"size":909,"mtime":1609572161995,"results":"56","hashOfConfig":"57"},{"size":362,"mtime":499162500000,"results":"58","hashOfConfig":"57"},{"size":4927,"mtime":1612861152798,"results":"59","hashOfConfig":"57"},{"size":6332,"mtime":1615632467069,"results":"60","hashOfConfig":"57"},{"size":5420,"mtime":1615644601247,"results":"61","hashOfConfig":"57"},{"size":4489,"mtime":1615644646316,"results":"62","hashOfConfig":"57"},{"size":1240,"mtime":1609534948654,"results":"63","hashOfConfig":"57"},{"size":2165,"mtime":1612932249290,"results":"64","hashOfConfig":"57"},{"size":403,"mtime":1611918080107,"results":"65","hashOfConfig":"57"},{"size":322,"mtime":1608920521970,"results":"66","hashOfConfig":"57"},{"size":210,"mtime":1609185722390,"results":"67","hashOfConfig":"57"},{"size":1302,"mtime":1609186020771,"results":"68","hashOfConfig":"57"},{"size":480,"mtime":1609066367328,"results":"69","hashOfConfig":"57"},{"size":488,"mtime":1612415034882,"results":"70","hashOfConfig":"57"},{"size":7849,"mtime":1612774880071,"results":"71","hashOfConfig":"57"},{"size":10906,"mtime":1615730113718,"results":"72","hashOfConfig":"57"},{"size":7281,"mtime":1612774897168,"results":"73","hashOfConfig":"57"},{"size":1040,"mtime":1609593713290,"results":"74","hashOfConfig":"57"},{"size":1227,"mtime":1609273287457,"results":"75","hashOfConfig":"57"},{"size":3715,"mtime":1609694891431,"results":"76","hashOfConfig":"57"},{"size":852,"mtime":1609177486185,"results":"77","hashOfConfig":"57"},{"size":2126,"mtime":1615718546672,"results":"78","hashOfConfig":"57"},{"size":10364,"mtime":1609697920114,"results":"79","hashOfConfig":"57"},{"size":2849,"mtime":1609697836355,"results":"80","hashOfConfig":"57"},{"size":3365,"mtime":1609697876598,"results":"81","hashOfConfig":"57"},{"size":4156,"mtime":1612446541967,"results":"82","hashOfConfig":"57"},{"size":3239,"mtime":1612446391237,"results":"83","hashOfConfig":"57"},{"size":7153,"mtime":1612774687535,"results":"84","hashOfConfig":"57"},{"size":16202,"mtime":1615740934523,"results":"85","hashOfConfig":"57"},{"size":604,"mtime":1609610005890,"results":"86","hashOfConfig":"57"},{"size":2903,"mtime":1615638105702,"results":"87","hashOfConfig":"57"},{"size":7255,"mtime":1615743304171,"results":"88","hashOfConfig":"57"},{"size":1493,"mtime":1612445003024,"results":"89","hashOfConfig":"57"},{"size":11170,"mtime":1615743811566,"results":"90","hashOfConfig":"57"},{"size":234,"mtime":1611646327636,"results":"91","hashOfConfig":"57"},{"size":11770,"mtime":1615743644794,"results":"92","hashOfConfig":"57"},{"size":439,"mtime":1611851621148,"results":"93","hashOfConfig":"57"},{"size":7633,"mtime":1615744007014,"results":"94","hashOfConfig":"57"},{"size":204,"mtime":1611918058996,"results":"95","hashOfConfig":"57"},{"size":1864,"mtime":1615741296379,"results":"96","hashOfConfig":"57"},{"size":5891,"mtime":1615744080598,"results":"97","hashOfConfig":"57"},{"size":2109,"mtime":1612439022322,"results":"98","hashOfConfig":"57"},{"size":4952,"mtime":1612009274382,"results":"99","hashOfConfig":"57"},{"size":1571,"mtime":1612849567386,"results":"100","hashOfConfig":"57"},{"size":1038,"mtime":1615741676027,"results":"101","hashOfConfig":"57"},{"size":4800,"mtime":1615744327604,"results":"102","hashOfConfig":"57"},{"size":256,"mtime":1612032046723,"results":"103","hashOfConfig":"57"},{"size":1021,"mtime":1612699218324,"results":"104","hashOfConfig":"57"},{"size":4337,"mtime":1612699308337,"results":"105","hashOfConfig":"57"},{"size":447,"mtime":1612267291238,"results":"106","hashOfConfig":"57"},{"size":4577,"mtime":1612932646612,"results":"107","hashOfConfig":"57"},{"size":3942,"mtime":1612932613457,"results":"108","hashOfConfig":"57"},{"size":5833,"mtime":1612887529310,"results":"109","hashOfConfig":"57"},{"size":5615,"mtime":1612775187035,"results":"110","hashOfConfig":"57"},{"size":256,"mtime":1612861088895,"results":"111","hashOfConfig":"57"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"1c1ievv",{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"114"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"114"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"114"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"114"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"114"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"114"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"114"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"114"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"114"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"114"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"114"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"114"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"114"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"114"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"208","messages":"209","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"114"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"114"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"114"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"114"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"114"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"114"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"D:\\React\\techkart\\client\\src\\index.js",[],["244","245"],"D:\\React\\techkart\\client\\src\\reportWebVitals.js",[],"D:\\React\\techkart\\client\\src\\App.js",["246","247"],"import React, {useEffect, useState} from 'react';\nimport Navbar from './components/Navbar/Navbar';\nimport { Route, Switch, useHistory} from 'react-router-dom';\nimport Login from './components/Auth/Login/Login';\nimport SignUp from './components/Auth/SignUp/SignUp';\nimport Confirmation from './components/Auth/Confirmation/Confirmation';\nimport {validatetoken} from './utils/auth-util';\nimport {useDispatch, useSelector} from 'react-redux';\nimport LoadingSpinner from './components/LoadingSpinner/LoadingSpinner';\nimport AdminRoute from './components/Routes/AdminRoute';\nimport UserRoute from './components/Routes/UserRoute';\nimport PasswordReset from './components/Auth/PasswordReset/PasswordReset';\nimport ForgotPassword from './components/Auth/PasswordReset/ForgotPassword';\nimport ScrollToTop from './components/ScrollToTop/ScrollToTop';\nimport SiteFooter from './components/SiteFooter/SiteFooter';\nimport ManageCategories from './pages/ManageCategories';\nimport ManageSubCategories from './pages/ManageSubCategories';\nimport ManageProducts from './pages/ManageProducts';\nimport ManageBannerImages from './pages/ManageBannerImages';\nimport Dashboard from './pages/Dashboard';\nimport ProductPage from './pages/ProductPage';\nimport Shop from './pages/Shop';\nimport Cart from './pages/Cart';\nimport CartDrawer from './components/CartDrawer/CartDrawer';\nimport Checkout from './pages/Checkout';\nimport Payment from './pages/Payment';\nimport Orders from './pages/Orders';\nimport UpdatePassword from './pages/UpdatePassword';\nimport Wishlist from './pages/Wishlist';\nimport Profile from './pages/Profile';\nimport ManageOrders from './pages/ManageOrders';\n\nconst App = () => {\n  const [loading, setLoading] = useState(true);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const {user} = useSelector(state => ({...state}));\n  \n  const persistUser = async() => {\n    const user = JSON.parse(localStorage.getItem(\"techkart-user\"));\n    if(user){\n      const {name, email, authtoken, _id, role} = user;\n      let res;\n      try{\n        res = await validatetoken(authtoken);\n        let objExpiresAt = JSON.parse('{\"date_created\": \"'+res.data.exp+'\"}');\n        const expiresAt = new Date(1000*objExpiresAt.date_created);\n        const currDate = new Date();\n\n        if(expiresAt > currDate){\n          localStorage.setItem(\"techkart-user\", JSON.stringify({name, email, authtoken, role, _id, expiresAt: res.data.exp}))\n          dispatch({\n            type: 'PERSIST_LOGIN',\n            payload: {\n              name,\n              email,\n              authtoken,\n              role,\n              _id,\n              expiresAt: res.data.exp\n            }\n          });\n        }\n        else{\n          localStorage.removeItem(\"techkart-user\");\n          dispatch({\n            type: 'LOG_OUT',\n            payload: null\n          });\n          history.push(\"/login\");\n        }\n        setLoading(false);\n      }\n      catch(err){\n        setLoading(false);\n        localStorage.removeItem(\"techkart-user\");\n        history.push(\"/login\");\n      }\n    }\n    else{\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    persistUser();\n  }, []);\n\n  return (\n    (!loading ?\n      <> \n      <div className=\"app__wrapper\">\n      <CartDrawer />\n      <ScrollToTop />\n      <Navbar />\n        <Switch>\n          <Route path=\"/login\" exact component={Login} />\n          <Route path=\"/signup\" exact component={SignUp} />\n          <Route path=\"/forgotpassword\" component={ForgotPassword} />\n          <Route path=\"/resetpassword/:email/:token\" exact component={PasswordReset} />\n          <Route path=\"/confirmation/:email/:token\" exact component={Confirmation} />\n          <Route path=\"/\" exact component={Dashboard} />\n          <Route path=\"/product/:slug\" exact component={ProductPage} />\n          <Route path=\"/shop\" exact component={Shop} />\n          <Route path=\"/cart\" exact component={Cart} />\n          <UserRoute path=\"/checkout\" exact component={Checkout} />\n          <UserRoute path=\"/payment\" exact component={Payment} />\n          <UserRoute path=\"/my/orders\" exact component={Orders} />\n          <UserRoute path=\"/my/passwordupdate\" exact component={UpdatePassword} />\n          <UserRoute path=\"/my/wishlist\" exact component={Wishlist} />\n          <UserRoute path=\"/my/profile\" exact component={Profile} />\n          <AdminRoute path=\"/dashboard/admin/categories\" exact component={ManageCategories} />\n          <AdminRoute path=\"/dashboard/admin/subcategories\" exact component={ManageSubCategories} />\n          <AdminRoute path=\"/dashboard/admin/products\" exact component={ManageProducts} />\n          <AdminRoute path=\"/dashboard/admin/bannerimages\" exact component={ManageBannerImages} />\n          <AdminRoute path=\"/dashboard/admin/orders\" exact component={ManageOrders} />\n        </Switch>\n      </div>\n      <SiteFooter /> \n    </> : <LoadingSpinner />)\n  );\n}\n\nexport default App;\n","D:\\React\\techkart\\client\\src\\components\\Navbar\\Navbar.js",["248"],"import React, {useState} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport { Popover, Button, Divider, Input, Badge } from 'antd';\r\nimport { UserOutlined, ShoppingCartOutlined, HeartOutlined, FundOutlined, SearchOutlined, LogoutOutlined, DashboardOutlined, ShoppingOutlined } from '@ant-design/icons';\r\nimport {useHistory} from 'react-router-dom';\r\nimport useWindowDimensions from '../../Hooks/useWindowDimensions';\r\n\r\nimport './Navbar.css';\r\n\r\nconst Navbar = () => {\r\n    const { Search } = Input;\r\n    const {user, search, cart} = useSelector(state => ({...state}));\r\n    const {text} = search;\r\n    const [searchText, setSearchText] = useState(text || \"\");\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const { width } = useWindowDimensions();\r\n    \r\n    const logoutHandler = (e) => {\r\n        e.preventDefault();\r\n        dispatch({\r\n            type: 'LOG_OUT',\r\n            payload: null\r\n          });\r\n        localStorage.removeItem(\"techkart-user\");\r\n    }\r\n\r\n    const profileLinkHandler = e => {\r\n        e.preventDefault();\r\n        history.push(\"/my/profile\");\r\n    }\r\n\r\n    const ordersLinkHandler = e => {\r\n        e.preventDefault();\r\n        history.push(\"/my/orders\");\r\n    }\r\n\r\n    const wishlistLinkHandler = e => {\r\n        e.preventDefault();\r\n        history.push(\"/my/wishlist\");\r\n    }\r\n\r\n    const loginContent = (\r\n        <div className=\"navbar__signup-container\">\r\n          <div className=\"navbar__signup\">\r\n              <strong>New customer?</strong>\r\n              <Link to=\"/signup\">Sign Up</Link>\r\n          </div>\r\n          {/* <Divider /> \r\n          <Button type=\"text\" icon={<UserOutlined />}>My Profile</Button>\r\n          <Divider />\r\n          <Button type=\"text\" icon={<FundOutlined />}>Orders</Button> */}\r\n        </div>\r\n    );\r\n    \r\n    let loggedInContent;\r\n    if(user !== null){\r\n        let adminLink = null;\r\n        if(user.role === 'admin') adminLink = (<><Button type=\"text\" icon={<DashboardOutlined />}><Link to=\"/dashboard/admin/categories\"><label style={{fontSize:'0.84rem', marginLeft:'8px', color:'#282c3f', cursor:'pointer'}}>Admin Dashboard</label></Link></Button>\r\n        <Divider /></>);\r\n        loggedInContent = (\r\n            <div className=\"navbar__signup-container\">\r\n                <label className=\"navbar__username\">Hello {user.name.split(' ')[0]}</label>\r\n                <Divider /> \r\n                {adminLink}\r\n                <Button type=\"text\" icon={<UserOutlined />} onClick={profileLinkHandler}>My Profile</Button>\r\n                <Divider />\r\n                <Button type=\"text\" icon={<FundOutlined />} onClick={ordersLinkHandler}>Orders</Button>\r\n                <Divider />\r\n                <Button type=\"text\" icon={<HeartOutlined />} onClick={wishlistLinkHandler}>Wishlist</Button>\r\n                <Divider />\r\n                <Button type=\"text\" onClick={(e) => logoutHandler(e)} icon={<LogoutOutlined />}>Logout</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const profileDiv = (\r\n        <div className=\"navbar__menu\">\r\n            <div className=\"navbar__menu__icon-wrapper\"><UserOutlined className=\"navbar__menu__icon\"/></div>\r\n            <div className=\"navbar__menu_text\"><label>Profile</label></div>\r\n        </div>\r\n    );\r\n\r\n    const searchChangeHandler = e => {\r\n        setSearchText(e.target.value)\r\n        dispatch({\r\n            type: 'SEARCH_QUERY',\r\n            payload: {text : e.target.value}\r\n        });\r\n    }\r\n\r\n    const searchHandler = async(e) => {\r\n        e.preventDefault();\r\n        history.push(`/shop`)\r\n    }\r\n\r\n    return (\r\n        <div className=\"navbar__container\">\r\n            <nav className=\"navbar__nav\">\r\n                <div className=\"navbar__brand-wrapper\">\r\n                    <Link to=\"/\" className=\"navbar__brand\">TechKart</Link>\r\n                    {width > 768 && <Input placeholder=\"Search for products, brands and more\" value={text} onChange={searchChangeHandler} suffix={<SearchOutlined onClick={searchHandler} />} className=\"navbar__search\" />}\r\n                </div>\r\n                <div className=\"navbar__links-wrapper\">\r\n                    <ul className=\"navbar__links\">\r\n                        <li>\r\n                            {user === null ? <Popover content={loginContent} placement=\"bottom\">\r\n                                <Button type=\"secondary\" shape=\"square\" size=\"Medium\">\r\n                                    <Link to=\"/login\">Login</Link>\r\n                                </Button>\r\n                                </Popover> : <Popover content={loggedInContent} placement=\"bottom\">\r\n                                    {profileDiv}\r\n                                </Popover>}\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/shop\">\r\n                                <div className=\"navbar__menu\">\r\n                                    <div className=\"navbar__menu__icon-wrapper\"><ShoppingOutlined  className=\"navbar__menu__icon\" /></div>\r\n                                    <div className=\"navbar__menu_text\"><label>Shop</label></div>\r\n                                </div>\r\n                            </Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/cart\">\r\n                                <Badge count={cart && cart.length} size=\"default\" offset={[0, 3]}>\r\n                                    <div className=\"navbar__menu\">\r\n                                        <div className=\"navbar__menu__icon-wrapper\"><ShoppingCartOutlined className=\"navbar__menu__icon\" style={{fontSize: '1.2rem'}}/></div>\r\n                                        <div style={{paddingTop: '3px'}} className=\"navbar__menu_text\"><label>Cart</label></div>\r\n                                    </div>\r\n                                </Badge>\r\n                            </Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n            {width <=  768 && <Input placeholder=\"Search for products, brands and more\" value={searchText} onChange={searchChangeHandler} suffix={<SearchOutlined onClick={searchHandler} />} className=\"navbar__search\" />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;\r\n","D:\\React\\techkart\\client\\src\\components\\Auth\\Login\\Login.js",["249","250"],"import React, {useState, useEffect} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { notification, Modal, Form, Input, Button, Checkbox } from 'antd';\r\nimport { ExclamationCircleOutlined, UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport {login, resendlink} from '../../../utils/auth-util';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\n\r\n\r\nimport '../../Auth/Auth.css';\r\nconst { confirm } = Modal;\r\n\r\nconst Login = ({history}) => {\r\n    const dispatch = useDispatch();\r\n    const {user} = useSelector(state => ({...state}));\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    \r\n    const openNotificationWithIcon = (type, msgTitle, msgBody)  => {\r\n        notification[type]({\r\n          message: msgTitle,\r\n          description: msgBody\r\n        });\r\n    };\r\n\r\n    const roleBasedRedirect = (role) => {\r\n        if(history.location.state){\r\n            history.push(history.location.state.source);\r\n        }\r\n        else if(role === 'admin'){\r\n            history.push(\"/dashboard/admin/categories\");\r\n        }\r\n        else{\r\n            history.push(\"/\")\r\n        }\r\n    }\r\n\r\n    const showConfirm = (content) => {\r\n        confirm({\r\n          title: 'Email verification failed',\r\n          icon: <ExclamationCircleOutlined />,\r\n          content: content,\r\n          centered: true,\r\n          async onOk() {\r\n            let res;\r\n            try{\r\n                res = await resendlink(email);\r\n                openNotificationWithIcon('success','Email verification link resent', 'Email verification link has been sent to your email.');\r\n                history.push(\"/login\");\r\n            }\r\n            catch(err){\r\n                setLoading(false);\r\n                openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n            }\r\n          },\r\n          onCancel() {\r\n            console.log('Cancel');\r\n          },\r\n        });\r\n      }\r\n    \r\n    const loginHandler = async(e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        let res;\r\n        try{\r\n            res = await login(email, password);\r\n            // openNotificationWithIcon('success',res.data.name, res.data.token);\r\n            localStorage.setItem(\"techkart-user\", JSON.stringify({name: res.data.name, email: res.data.email, authtoken: res.data.token, role: res.data.role, _id: res.data.userId}))\r\n            dispatch({\r\n                type: 'LOGGED_IN',\r\n                payload: {\r\n                  name: res.data.name,\r\n                  email: res.data.email,\r\n                  authtoken: res.data.token,\r\n                  role: res.data.role,\r\n                  _id: res.data.userId\r\n                }\r\n            });\r\n            roleBasedRedirect(res.data.role);\r\n            // res.data.role === 'admin' ? history.push(\"/dashboard/admin/categories\") : history.push(\"/\");\r\n        }\r\n        catch(err){\r\n            setLoading(false);\r\n            if(err.response.data.msg === \"Your Email has not been verified.\"){\r\n                showConfirm(`${err.response.data.msg} Do you want to resend email verification link?`);\r\n            }\r\n            else{\r\n                openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(user && user.authtoken && (history.location.pathname === \"/login\" || history.location.pathname === \"/login/\")){\r\n            history.push(\"/\");\r\n        }\r\n    }, [user]);\r\n    return (\r\n      <div className=\"login-signup__container\">\r\n        <h2>Sign In</h2>\r\n        <Form\r\n          name=\"normal_login\"\r\n          className=\"login-form\"\r\n          initialValues={{ remember: true }}\r\n        >\r\n          <Form.Item\r\n            name=\"username\"\r\n            rules={[{ required: true, message: \"Please input your Username!\" }]}\r\n          >\r\n            <Input\r\n              prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n              placeholder=\"Email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"password\"\r\n            rules={[{ required: true, message: \"Please input your Password!\" }]}\r\n          >\r\n            <Input\r\n              prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n              type=\"password\"\r\n              placeholder=\"Password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item>\r\n            <Form.Item name=\"remember\" valuePropName=\"checked\" noStyle>\r\n              <Checkbox>Remember me</Checkbox>\r\n            </Form.Item>\r\n\r\n            \r\n            <Link className=\"login-form-forgot\" to=\"/forgotpassword\">Forgot Password?</Link>\r\n          </Form.Item>\r\n\r\n          <Form.Item>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              className=\"login-form-button\"\r\n              block\r\n              onClick={loginHandler}\r\n              loading={loading}\r\n            >\r\n              Log in\r\n            </Button>\r\n            Or <Link to=\"/signup\">register now!</Link>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n","D:\\React\\techkart\\client\\src\\components\\Auth\\SignUp\\SignUp.js",["251","252","253"],"import React, {useState} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { notification, Modal, Form, Input, Button, Checkbox, Divider } from 'antd';\r\nimport { ExclamationCircleOutlined, UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport {signUp} from '../../../utils/auth-util';\r\n\r\nconst SignUp = ({history}) => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    \r\n    const openNotificationWithIcon = (type, msgTitle, msgBody)  => {\r\n        notification[type]({\r\n          message: msgTitle,\r\n          description: msgBody\r\n        });\r\n    };\r\n    \r\n    const signUpHandler = async(e) => {\r\n        e.preventDefault();\r\n        if(password !== confirmPassword){\r\n            openNotificationWithIcon('error',\"Password mismatch\", \"Password and confirm password do not match.\");\r\n            setLoading(false);\r\n            return;\r\n        }\r\n        setLoading(true);\r\n        let res;\r\n        try{\r\n            res = await signUp(name, email, password);\r\n            openNotificationWithIcon('success',res.data.statusText, res.data);\r\n            history.push(\"/login\");\r\n        }\r\n        catch(err){\r\n            setLoading(false);\r\n            openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"login-signup__container signup__container\">\r\n            <h2>Sign Up</h2>\r\n            <Form\r\n                name=\"normal_signup\"\r\n                className=\"signup-form\"\r\n                initialValues={{ remember: true }}\r\n            >\r\n                <Form.Item\r\n                    name=\"name\"\r\n                    rules={[{ required: true, message: \"Please input your Name!\" }]}\r\n                >\r\n                    <Input\r\n                        prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n                        placeholder=\"Name\"\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"username\"\r\n                    rules={[{ required: true, message: \"Please input your Username!\" }]}\r\n                >\r\n                    <Input\r\n                    prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n                    placeholder=\"Email\"\r\n                    value={email}\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"password\"\r\n                    rules={[{ required: true, message: \"Please input your Password!\" }]}\r\n                >\r\n                    <Input\r\n                    prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"confirmpassword\"\r\n                    rules={[{ required: true, message: \"Please input your Confirm Password!\" }]}\r\n                >\r\n                    <Input\r\n                    prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                    type=\"password\"\r\n                    placeholder=\"Confirm Password\"\r\n                    value={confirmPassword}\r\n                    onChange={(e) => setConfirmPassword(e.target.value)}\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item>\r\n                    <Button\r\n                    type=\"primary\"\r\n                    htmlType=\"submit\"\r\n                    className=\"login-form-button\"\r\n                    block\r\n                    onClick={signUpHandler}\r\n                    loading={loading}\r\n                    >\r\n                    Sign Up\r\n                    </Button>\r\n                </Form.Item>\r\n                <Divider />\r\n\r\n                <Form.Item>\r\n                    <span style={{float:'right'}}>Already a member? <Link to=\"/login\">Log In</Link></span>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUp;","D:\\React\\techkart\\client\\src\\utils\\auth-util.js",[],"D:\\React\\techkart\\client\\src\\components\\Auth\\Confirmation\\Confirmation.js",["254","255","256"],"import React, {useEffect} from 'react';\r\nimport {confirmation, resendlink} from '../../../utils/auth-util';\r\nimport { notification, Modal } from 'antd';\r\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\r\n\r\nconst { confirm } = Modal;\r\n\r\nconst Confirmation = ({history, match}) => {\r\n    const openNotificationWithIcon = (type, msgTitle, msgBody)  => {\r\n        notification[type]({\r\n          message: msgTitle,\r\n          description: msgBody\r\n        });\r\n    };\r\n\r\n    const verifyEmail = async() => {\r\n        let res;\r\n        try{\r\n            res = await confirmation(match.params.email, match.params.token);\r\n            openNotificationWithIcon('success', 'Email verification successful', 'Your email address has been verified succesfully.');\r\n            history.push(\"/\");\r\n        }\r\n        catch(err){\r\n            if(err.response.status === 400){\r\n                showConfirm(`${err.response.data.msg} Do you want to resend email verification link?`);\r\n            }\r\n            else{\r\n                openNotificationWithIcon('error', 'Email verification failed', err.response.data.msg);\r\n                history.push(\"/login\");\r\n            }\r\n        }\r\n    }\r\n\r\n    const showConfirm = (content) => {\r\n        confirm({\r\n          title: 'Email verification failed',\r\n          icon: <ExclamationCircleOutlined />,\r\n          content: content,\r\n          centered: true,\r\n          async onOk() {\r\n            let res;\r\n            try{\r\n                res = await resendlink(match.params.email);\r\n                openNotificationWithIcon('success','Email verification link resent', 'Email verification link has been sent to your email.');\r\n                history.push(\"/login\");\r\n            }\r\n            catch(err){\r\n                openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n                history.push('/login');\r\n            }\r\n          },\r\n          onCancel() {\r\n            history.push('/login');\r\n          },\r\n        });\r\n      }\r\n\r\n    useEffect(() => {\r\n        verifyEmail();\r\n    }, []);\r\n    return (\r\n        <>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Confirmation;\r\n","D:\\React\\techkart\\client\\src\\Reducers\\index.js",[],"D:\\React\\techkart\\client\\src\\Reducers\\userReducer.js",[],"D:\\React\\techkart\\client\\src\\components\\LoadingSpinner\\LoadingSpinner.js",[],"D:\\React\\techkart\\client\\src\\components\\AdminDashboard\\AdminLeftNav.js",[],["257","258"],"D:\\React\\techkart\\client\\src\\components\\Routes\\AdminRoute.js",[],"D:\\React\\techkart\\client\\src\\components\\Routes\\UserRoute.js",[],"D:\\React\\techkart\\client\\src\\pages\\ManageSubCategories.js",["259","260","261","262"],"import React, {useState,useEffect} from 'react';\r\nimport LeftNav from '../components/LeftNav/LeftNav';\r\nimport '../components/AdminDashboard/AdminDashboard.css';\r\nimport {Form, List, Card, Divider, notification, Popconfirm, Select, Empty} from 'antd';\r\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons';\r\nimport {fetchAll} from '../utils/categories-util';\r\nimport {fetchAllSubCategories, createSubCategory, removeSubCategory, updatesubCategory} from '../utils/subcategories-util';\r\nimport {useSelector} from 'react-redux';\r\nimport SubCategoryForm from '../components/Forms/SubCategoryForm';\r\n\r\nconst ManageSubCategories = () => {\r\n    const [subCategory, setSubCategory] = useState({slug:'', name:'', mode:'new'});\r\n    const [subCategories, setSubCategories] = useState([]);\r\n    const [category, setCategory] = useState(null);\r\n    const [categories, setCategories] = useState([]);\r\n    \r\n    const [form] = Form.useForm();\r\n    const {user} = useSelector(state => ({...state}));\r\n    const [visible, setVisible] = useState(false);\r\n    const [confirmLoading, setConfirmLoading] = useState(false);\r\n\r\n    const { Option } = Select;\r\n    const {email, authtoken} = user;\r\n    \r\n    const openNotificationWithIcon = (type, msgTitle, msgBody)  => {\r\n        notification[type]({\r\n          message: msgTitle,\r\n          description: msgBody\r\n        });\r\n    };\r\n\r\n    const links = [\r\n      {to:\"/dashboard/admin/categories\", title:\"Categories\"},\r\n      {to:\"/dashboard/admin/subcategories\", title:\"Sub Categories\"},\r\n      {to:\"/dashboard/admin/products\", title:\"Products\"},\r\n      {to:\"/dashboard/admin/bannerimages\", title:\"Banner Images\"},\r\n      {to:\"/dashboard/admin/orders\", title:\"Orders\"},\r\n    ];\r\n\r\n    const createSubCategoryHandler = async(e) => {\r\n        e.preventDefault();\r\n        try{\r\n          await form.validateFields();\r\n          if(subCategory.name.length > 1 && subCategory.name.length < 2) return openNotificationWithIcon('error','Sub Category Length Error', 'Please ensure that the sub category name has at least 2 characters');\r\n          try{\r\n              const newSubCategory = await createSubCategory({name: subCategory.name,parent: category}, email, authtoken);\r\n              fetchSubCategories();\r\n              setCategory(null);\r\n              setSubCategory({slug:'', name:'', mode:'new'});\r\n              setVisible(false);\r\n              openNotificationWithIcon('success','Sub Category Created', `${newSubCategory.data.subCategory} created successfully!`)\r\n          }\r\n          catch(err){\r\n              openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n          }\r\n        }\r\n        catch(err){\r\n\r\n        }\r\n    }\r\n\r\n    const updateSubCategoryHandler = async(e) => {\r\n        e.preventDefault();\r\n        try{\r\n          await form.validateFields();\r\n          if(subCategory.name.length > 1 && subCategory.name.length < 2) return openNotificationWithIcon('error','Sub Category Length Error', 'Please ensure that the sub category name has at least 2 characters');\r\n          try{\r\n              const updatedSubCategory = await updatesubCategory({name: subCategory.name, parent: category}, email, authtoken, subCategory.slug);\r\n              fetchSubCategories();\r\n              setCategory(null);\r\n              setSubCategory({slug:'', name:'', mode:'new'});\r\n              setVisible(false);\r\n              openNotificationWithIcon('success','Sub Category Updated', `${updatedSubCategory.data.subCategory} updated successfully!`)\r\n          }\r\n          catch(err){\r\n              openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n          }\r\n        }\r\n        catch(err){\r\n\r\n        }\r\n    }\r\n\r\n    const fetchCategories = async() => {\r\n        try{\r\n            const categories = await fetchAll();\r\n            setCategories(categories.data);\r\n        }\r\n        catch(err){\r\n            openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n        }\r\n    }\r\n\r\n    const fetchSubCategories = async() => {\r\n        try{\r\n            const subCategories = await fetchAllSubCategories();\r\n            setSubCategories(subCategories.data);\r\n        }\r\n        catch(err){\r\n            openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n        }\r\n    }\r\n\r\n    const removeSubCategoryHandler = async(slug) => {\r\n        try{\r\n            const subCategory = await removeSubCategory(authtoken, slug, email);\r\n            openNotificationWithIcon('success','Sub Category Deleted', `${subCategory.data.msg}!`)\r\n            fetchSubCategories();\r\n        }\r\n        catch(err){\r\n            openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n        }\r\n    }\r\n\r\n    function onChange(value) {\r\n        setCategory(value);\r\n    }\r\n\r\n    const editSubCategory = async({name, slug, parent}) => {\r\n        setSubCategory({...category, slug, name, mode: \"edit\"});\r\n        setCategory(parent);\r\n        setVisible(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchCategories();\r\n        fetchSubCategories();\r\n    }, []);\r\n\r\n    return (\r\n      <>\r\n        <div className=\"admin__wrapper\">\r\n          <div className=\"main__leftnav\">\r\n                <LeftNav links={links} title=\"Admin Dashboard\" active=\"/dashboard/admin/subcategories\" />\r\n          </div>\r\n          <div className=\"admin__content\">\r\n            <SubCategoryForm\r\n              createSubCategoryHandler={createSubCategoryHandler}\r\n              updateSubCategoryHandler={updateSubCategoryHandler}\r\n              onChange={onChange}\r\n              subCategory={subCategory}\r\n              setSubCategory={setSubCategory}\r\n              category={category}\r\n              setCategory={setCategory}\r\n              categories={categories}\r\n              visible={visible}\r\n              setVisible={setVisible}\r\n              form={form}\r\n            />\r\n            <Divider />\r\n            {subCategories.length > 0 ? (\r\n              <List\r\n                grid={{\r\n                  gutter: 16,\r\n                  xs: 1,\r\n                  sm: 2,\r\n                  md: 2,\r\n                  lg: 4,\r\n                  xl: 4,\r\n                  xxl: 4,\r\n                }}\r\n                dataSource={subCategories}\r\n                renderItem={(item) => (\r\n                  <List.Item>\r\n                    <Card\r\n                      actions={[\r\n                        <EditOutlined\r\n                          key=\"edit\"\r\n                          onClick={() =>\r\n                            editSubCategory({\r\n                              slug: item.slug,\r\n                              name: item.name,\r\n                              parent: item.parent,\r\n                            })\r\n                          }\r\n                        />,\r\n                        <Popconfirm\r\n                          title=\"Are you sure to delete this sub category?\"\r\n                          onConfirm={() => removeSubCategoryHandler(item.slug)}\r\n                          okText=\"Yes\"\r\n                          cancelText=\"No\"\r\n                        >\r\n                          <DeleteOutlined key=\"ellipsis\" />\r\n                        </Popconfirm>,\r\n                      ]}\r\n                    >\r\n                      {`${item.name}`}\r\n                    </Card>\r\n                  </List.Item>\r\n                )}\r\n              />\r\n            ) : (\r\n              <Empty\r\n                image=\"https://gw.alipayobjects.com/zos/antfincdn/ZHrcdLPrvN/empty.svg\"\r\n                imageStyle={{\r\n                  height: 60,\r\n                }}\r\n                description={<span>No sub categories found!</span>}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n}\r\n\r\nexport default ManageSubCategories;","D:\\React\\techkart\\client\\src\\pages\\ManageProducts.js",["263","264","265","266","267","268"],"D:\\React\\techkart\\client\\src\\pages\\ManageBannerImages.js",["269","270"],"import React, {useState, useEffect} from \"react\";\r\nimport Resizer from \"react-image-file-resizer\";\r\nimport axios from \"axios\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Popconfirm, Empty, List, Divider, notification, Upload, Card, Button } from \"antd\";\r\nimport { UploadOutlined, DeleteOutlined } from '@ant-design/icons';\r\nimport LeftNav from '../components/LeftNav/LeftNav';\r\nimport '../components/AdminDashboard/AdminDashboard.css';\r\nimport {uploadBannerImage, removeBannerImage, fetchBannerImages} from '../utils/bannerImages-util';\r\n\r\nconst ManageBannerImages = () => {\r\n    const { user } = useSelector((state) => ({ ...state }));\r\n    const {email, authtoken} = user;\r\n    const [loading, setLoading] = useState(false);\r\n    const [bannerImages, setBannerImages] = useState([]);\r\n\r\n    const openNotificationWithIcon = (type, msgTitle, msgBody)  => {\r\n        notification[type]({\r\n          message: msgTitle,\r\n          description: msgBody\r\n        });\r\n    };\r\n\r\n    const links = [\r\n        {to:\"/dashboard/admin/categories\", title:\"Categories\"},\r\n        {to:\"/dashboard/admin/subcategories\", title:\"Sub Categories\"},\r\n        {to:\"/dashboard/admin/products\", title:\"Products\"},\r\n        {to:\"/dashboard/admin/bannerimages\", title:\"Banner Images\"},\r\n        {to:\"/dashboard/admin/orders\", title:\"Orders\"},\r\n    ];\r\n\r\n    const loadBannerImages = async() => {\r\n        try{\r\n            let bannerImages = await fetchBannerImages();\r\n            setBannerImages(bannerImages.data);\r\n        }\r\n        catch(err){\r\n            openNotificationWithIcon('error',err.response.statusText, err.response.data);\r\n        }\r\n    }\r\n\r\n    const fileUploadAndResize = (e) => {\r\n        let file = e.target.files[0];\r\n        if (file) {\r\n            setLoading(true);\r\n            Resizer.imageFileResizer(file, 1920, 1080, \"JPEG\", 100, 0, (uri) => {\r\n                axios.post(`${process.env.REACT_APP_API_URL}/uploadimages`, { image: uri , email}, {\r\n                      headers: {\r\n                        authtoken\r\n                      },\r\n                    }\r\n                )\r\n                .then(async(res) => {\r\n                    try{\r\n                        let uploadedImage = await uploadBannerImage(res.data, authtoken, email);\r\n                        loadBannerImages();\r\n                        openNotificationWithIcon('success', 'Upload Successful', uploadedImage.data.msg);\r\n                    }\r\n                    catch(err){\r\n                        openNotificationWithIcon('error',err.response.statusText, err.response.data);\r\n                    }\r\n                    setLoading(false);\r\n                    setBannerImages([ ...bannerImages, {url : res.data.url, public_id: res.data.public_id} ]);\r\n                  })\r\n                .catch((err) => {\r\n                    setLoading(false);\r\n                    openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n                });\r\n            },\r\n              \"base64\"\r\n            );\r\n        }\r\n    };\r\n\r\n    const handleBannerImageRemove = (public_id) => {\r\n        setLoading(true);\r\n        axios.post(`${process.env.REACT_APP_API_URL}/removeimage`,{ public_id, authtoken, email }, {\r\n            headers: {\r\n                authtoken\r\n            },\r\n        })\r\n        .then(async(res) => {\r\n            try{\r\n                let deletedImage = await removeBannerImage(public_id, authtoken, email);\r\n                let filteredImages = bannerImages.filter((item) => {\r\n                    return item.public_id !== public_id;\r\n                });\r\n                setLoading(false);\r\n                setBannerImages(filteredImages);\r\n                loadBannerImages();\r\n                openNotificationWithIcon('success', 'Removal Successful', deletedImage.data.msg);\r\n            }\r\n            catch(err){\r\n                openNotificationWithIcon('error',err.response.statusText, err.response.data);\r\n                setLoading(false);\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            setLoading(false);\r\n            openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadBannerImages();\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"admin__wrapper\">\r\n            <div className=\"main__leftnav\">\r\n                <LeftNav links={links} title=\"Admin Dashboard\" active=\"/dashboard/admin/bannerimages\" />\r\n            </div>\r\n            <div className=\"admin__content\">\r\n                {!loading ? <label className=\"admin__uploadbanner\">\r\n                    {<UploadOutlined style={{marginRight:'8px'}}/>}Choose File\r\n                    <input\r\n                        type=\"file\"\r\n                        hidden\r\n                        accept=\"images/*\"\r\n                        onChange={fileUploadAndResize}\r\n                    />\r\n                </label> : <Button type=\"primary\" loading>Working on it</Button> }\r\n                <Divider />\r\n                {bannerImages.length > 0 \r\n                ?<List\r\n                        grid={{\r\n                        gutter: 16,\r\n                        xs: 1,\r\n                        sm: 1,\r\n                        md: 1,\r\n                        lg: 2,\r\n                        xl: 2,\r\n                        xxl: 2,\r\n                        }}\r\n                        dataSource={bannerImages}\r\n                        renderItem={item => (\r\n                        <List.Item>\r\n                            <Card\r\n                                hoverable\r\n                                bodyStyle={{ padding: \"0\"}}\r\n                                cover={\r\n                                    <img\r\n                                        alt=\"\"\r\n                                        src={item.url}\r\n                                        style={{objectFit:'contain', display:'block', height:'auto'}}\r\n                                    />\r\n                                }\r\n                                actions={[\r\n                                    <Popconfirm\r\n                                        title=\"Are you sure to delete this image?\"\r\n                                        onConfirm={() => handleBannerImageRemove(item.public_id)}\r\n                                        okText=\"Yes\"\r\n                                        cancelText=\"No\"\r\n                                    >\r\n                                        <DeleteOutlined key=\"delete\" />\r\n                                    </Popconfirm>\r\n                                ]}\r\n                            >\r\n                            </Card>\r\n                        </List.Item>\r\n                        )}\r\n                    />\r\n                    : <Empty\r\n                        image=\"https://gw.alipayobjects.com/zos/antfincdn/ZHrcdLPrvN/empty.svg\"\r\n                        imageStyle={{\r\n                        height: 60,\r\n                        }}\r\n                        description={\r\n                        <span>\r\n                            No banner images found!\r\n                        </span>\r\n                        }\r\n                    />}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ManageBannerImages;","D:\\React\\techkart\\client\\src\\utils\\categories-util.js",[],"D:\\React\\techkart\\client\\src\\utils\\subcategories-util.js",[],"D:\\React\\techkart\\client\\src\\components\\FileUpload\\FileUpload.js",["271","272","273"],"import React, { useState } from \"react\";\r\nimport Resizer from \"react-image-file-resizer\";\r\nimport axios from \"axios\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Avatar, Button, Badge, Image, Divider, notification } from \"antd\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\n\r\nconst FileUpload = ({ productDetails, setProductDetails, openNotificationWithIcon, loading, setLoading }) => {\r\n  const { user } = useSelector((state) => ({ ...state }));\r\n  const { email, authtoken } = user;\r\n  let allProductImages = [...productDetails.images];\r\n\r\n  const productImageUploadAndResize = (e) => {\r\n    let files = e.target.files;\r\n    if (files) {\r\n      for (let i = 0; i < files.length; i++) {\r\n        setLoading(true);\r\n        Resizer.imageFileResizer(files[i], 540, 540, \"JPEG\", 100, 0, (uri) => {\r\n            axios.post(`${process.env.REACT_APP_API_URL}/uploadimages`, { image: uri , email}, {\r\n                  headers: {\r\n                    authtoken\r\n                  },\r\n                }\r\n            )\r\n            .then((res) => {\r\n                try{\r\n                    allProductImages.push(res.data);\r\n                    setProductDetails({ ...productDetails, images: allProductImages });\r\n                    setLoading(false);\r\n                }\r\n                catch(err){\r\n                    openNotificationWithIcon('error',err.response.statusText, err.response.data);\r\n                    setLoading(false);\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                setLoading(false);\r\n                openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n            });\r\n        },\r\n          \"base64\"\r\n        );\r\n      }\r\n    }\r\n};\r\n\r\nconst handleProductImageRemove = (public_id) => {\r\n  setLoading(true);\r\n  axios.post(`${process.env.REACT_APP_API_URL}/removeimage`,{ public_id, authtoken, email }, {\r\n      headers: {\r\n          authtoken\r\n      },\r\n  })\r\n  .then((res) => {\r\n      try{\r\n          let filteredImages = allProductImages.filter((item) => {\r\n              return item.public_id !== public_id;\r\n          });\r\n          setProductDetails({ ...productDetails, images: filteredImages });\r\n          setLoading(false);\r\n      }\r\n      catch(err){\r\n          openNotificationWithIcon('error',err.response.statusText, err.response.data);\r\n          setLoading(false);\r\n      }\r\n  })\r\n  .catch((err) => {\r\n      setLoading(false);\r\n      openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n  });\r\n}\r\n\r\n  return (\r\n    <>\r\n      {!loading ? (\r\n        <label className=\"admin__uploadbanner\">\r\n          {<UploadOutlined style={{ marginRight: \"8px\" }} />}Choose File\r\n          <input\r\n            type=\"file\"\r\n            multiple\r\n            hidden\r\n            accept=\"images/*\"\r\n            onChange={productImageUploadAndResize}\r\n          />\r\n        </label>\r\n      ) : (\r\n        <Button type=\"primary\" loading>\r\n          Working on it\r\n        </Button>\r\n      )}\r\n      <Divider />\r\n\r\n     \r\n      <div>\r\n        {productDetails && productDetails.images.length > 0 &&\r\n          productDetails.images.map((image) => (\r\n            <Badge\r\n              count=\"X\"\r\n              key={image.public_id}\r\n              onClick={() => handleProductImageRemove(image.public_id)}\r\n              style={{ cursor: \"pointer\" }}\r\n            >\r\n              <Avatar\r\n                src={image.url}\r\n                size={{ xs: 24, sm: 32, md: 40, lg: 64, xl: 80, xxl: 100 }}\r\n                shape=\"square\"\r\n                style={{marginLeft: '15px'}}\r\n              />\r\n            </Badge>\r\n          ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FileUpload;\r\n","D:\\React\\techkart\\client\\src\\utils\\bannerImages-util.js",[],"D:\\React\\techkart\\client\\src\\utils\\product-util.js",[],"D:\\React\\techkart\\client\\src\\components\\Forms\\ProductForm.js",["274","275"],"import React, { useEffect, useState } from 'react';\r\nimport { Drawer, Form, Input, Select, InputNumber, Button, notification } from 'antd';\r\nimport { PlusOutlined, InfoCircleOutlined } from '@ant-design/icons';\r\nimport { useSelector } from 'react-redux';\r\nimport { createProduct, updateProduct } from '../../utils/product-util';\r\nimport { fetchLookupSubCategories } from '../../utils/subcategories-util';\r\nimport FileUpload from '../FileUpload/FileUpload';\r\n\r\nconst ProductForm = ({ productDetails, setProductDetails, openNotificationWithIcon, fetchProducts, setVisible, visible, initialState}) => {\r\n    const [form] = Form.useForm();\r\n    \r\n    const {user} = useSelector(state => ({...state}));\r\n    const {email, authtoken} = user;\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    \r\n    const showDrawer = () => {\r\n        setVisible(true);\r\n    };\r\n\r\n    const onSubmit = async() => {\r\n        try{\r\n            await form.validateFields();\r\n            try{\r\n                setLoading(true);\r\n                if(productDetails.mode === \"edit\"){\r\n                    let updatedProduct = await updateProduct(productDetails, email, authtoken, productDetails.slug);\r\n                    openNotificationWithIcon('success','Product Updated', `${updatedProduct.data.title} updated successfully!`);\r\n                    fetchProducts();\r\n                    form.resetFields();\r\n                    setVisible(false);\r\n                }\r\n                else{\r\n                    let product = await createProduct(productDetails, email, authtoken);\r\n                    openNotificationWithIcon('success','Product Created', `${product.data.title} created successfully!`);\r\n                    fetchProducts();\r\n                    form.resetFields();\r\n                    setVisible(false);\r\n                }\r\n            }\r\n            catch(err){\r\n                setLoading(false);\r\n                openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n            }\r\n            finally{\r\n                setLoading(false);\r\n            }\r\n            \r\n        }\r\n        catch(err){\r\n\r\n        }\r\n    }\r\n\r\n    const onClose = () => {\r\n        setProductDetails({...initialState, categories: productDetails.categories});\r\n        setVisible(false);\r\n    }\r\n\r\n    const onChangeHandler = (e) => {\r\n        setProductDetails({...productDetails, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    const categoryChangeHandler = async(value) => {\r\n        try{\r\n            let allsubcategories =  await fetchLookupSubCategories(value);\r\n            setProductDetails({...productDetails, allsubcategories: allsubcategories.data, category: value, subcategories : [] });\r\n        }\r\n        catch(err){\r\n            openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n        }\r\n    }\r\n\r\n    const subCategoriesChangeHandler = (value) => {\r\n        setProductDetails({...productDetails, subcategories: value });\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(productDetails.mode === \"edit\"){\r\n            categoryChangeHandler(productDetails.category);\r\n        }\r\n        form.resetFields();\r\n    }, [productDetails.mode])\r\n\r\n    return (\r\n    <>\r\n      <Button type=\"primary\" onClick={showDrawer}>\r\n          <PlusOutlined /> New product\r\n      </Button>\r\n      <Drawer\r\n        title={productDetails.mode !== \"edit\" ? \"Create Product\" : \"Edit Product\"}\r\n        width={window.innerWidth > 768 ? 650 : window.innerWidth - 75}\r\n        placement=\"right\"\r\n        closable={true}\r\n        onClose={onClose}\r\n        visible={visible}\r\n      >\r\n        <Form\r\n            form={form}\r\n            layout=\"vertical\"\r\n            name={productDetails.mode !== \"edit\" ? \"Create Product\" : \"Edit Product\"}\r\n            scrollToFirstError\r\n        >\r\n            <Form.Item\r\n                label=\"Title\"\r\n                name=\"title\"\r\n                rules={[{ required: true, message: 'Please input product title!' }]}\r\n                initialValue={productDetails.title}\r\n            >\r\n                <Input name=\"title\" allowClear onChange={onChangeHandler} />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Brand\"\r\n                name=\"brand\"\r\n                rules={[{ required: true, message: 'Please input product brand!' }]}\r\n                initialValue={productDetails.brand}\r\n            >\r\n                <Input name=\"brand\" allowClear onChange={onChangeHandler} />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Highlights\"\r\n                name=\"highlights\"\r\n                tooltip={{ title: 'Each highlight must be separated by \";#\".', icon: <InfoCircleOutlined /> }}\r\n                rules={[{ required: true, message: 'Please input product highlights!' }]}\r\n                initialValue={productDetails.highlights}\r\n            >\r\n                <Input.TextArea name=\"highlights\" allowClear onChange={onChangeHandler} />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Specifications\"\r\n                name=\"specifications\"\r\n                tooltip={{ title: 'Specifications should be a JSON wrapped in an array.', icon: <InfoCircleOutlined /> }}\r\n                rules={[{ required: true, message: 'Please input product specifications!' }]}\r\n                initialValue={productDetails.specifications}\r\n            >\r\n                <Input.TextArea name=\"specifications\" allowClear onChange={onChangeHandler} />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Price\"\r\n                name=\"price\"\r\n                rules={[{ required: true, message: 'Please input product price!' }]}\r\n                initialValue={productDetails.price}\r\n            >\r\n                <InputNumber\r\n                    initialValues={0}\r\n                    formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                    parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n                    onChange={(e) => setProductDetails({...productDetails, price: e})}\r\n                    name=\"price\"\r\n                    style={{width:'100%'}}\r\n                    allowClear\r\n                />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Category\"\r\n                name=\"category\"\r\n                rules={[{ required: true, message: 'Please select product category!' }]}\r\n                initialValue={productDetails.mode === \"edit\" && productDetails.category}\r\n            >\r\n                <Select onChange={categoryChangeHandler} allowClear>\r\n                    {productDetails.categories.length> 0 && productDetails.categories.map(c => (\r\n                        <Select.Option key={c._id} value={c._id}>{c.name}</Select.Option>\r\n                    ))}\r\n                </Select>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Sub Category\"\r\n                name=\"subcategories\"\r\n                rules={[{ required: true, message: 'Please select product sub category!' }]}\r\n                initialValue={productDetails.mode === \"edit\" && productDetails.subcategories.length > 0 ? productDetails.subcategories : []}\r\n            >\r\n                <Select mode=\"multiple\" onChange={subCategoriesChangeHandler} allowClear>\r\n                    {productDetails.allsubcategories.length> 0 && productDetails.allsubcategories.map(s => (\r\n                        <Select.Option key={s._id} value={s._id}>{s.name}</Select.Option>\r\n                    ))}\r\n                </Select>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Quantity\"\r\n                name=\"quantity\"\r\n                rules={[{ required: true, message: 'Please input availble product quantity!' }]}\r\n                initialValue={productDetails.quantity}\r\n            >\r\n                <InputNumber\r\n                    initialValues={0}\r\n                    onChange={(e) => setProductDetails({...productDetails, quantity: e})}\r\n                    name=\"quantity\"\r\n                    style={{width:'100%'}}\r\n                    allowClear\r\n                />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Sold\"\r\n                name=\"sold\"\r\n                rules={[{ required: true, message: 'Please input no of products sold!' }]}\r\n                initialValue={productDetails.sold}\r\n            >\r\n                <InputNumber\r\n                    initialValues={0}\r\n                    onChange={(e) => setProductDetails({...productDetails, sold: e})}\r\n                    name=\"sold\"\r\n                    style={{width:'100%'}}\r\n                    allowClear\r\n                />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Color\"\r\n                name=\"color\"\r\n                rules={[{ required: true, message: 'Please input product color!' }]}\r\n                initialValue={productDetails.color}\r\n            >\r\n                <Input name=\"color\" allowClear onChange={onChangeHandler} />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Shipping\"\r\n                name=\"shipping\"\r\n                rules={[{ required: true, message: 'Please select product shipping option!' }]}\r\n                initialValue={productDetails.shipping}\r\n            >\r\n                <Select placeholder=\"Select shipping\" onChange={(e) => setProductDetails({...productDetails, shipping: e})} allowClear>\r\n                    <Select.Option value=\"Yes\">Yes</Select.Option>\r\n                    <Select.Option value=\"No\">No</Select.Option>\r\n                </Select>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Images\"\r\n                name=\"images\"\r\n                \r\n            >\r\n                <FileUpload productDetails={productDetails} \r\n                    setProductDetails={setProductDetails} \r\n                    openNotificationWithIcon={openNotificationWithIcon} \r\n                    loading={loading}\r\n                    setLoading={setLoading}\r\n                />\r\n            </Form.Item>\r\n\r\n            <Form.Item>\r\n                <Button type=\"primary\" onClick={onSubmit} loading={loading}>\r\n                    Submit\r\n                </Button>\r\n            </Form.Item>\r\n            </Form>\r\n      </Drawer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProductForm;\r\n","D:\\React\\techkart\\client\\src\\components\\Forms\\CategoryForm.js",["276"],"import React, { useEffect } from 'react';\r\nimport { Drawer, Form, Input, Button } from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport FileUpload from '../FileUpload/FileUpload';\r\n\r\nconst CategoryForm = ({category, setCategory, setVisible, visible, createCategoryHandler, updateCategoryHandler, form, loading, setLoading, openNotificationWithIcon}) => {\r\n    const showDrawer = () => {\r\n        if(category.mode !== \"edit\") setCategory({slug:'', name:'', mode:'', images:[]})\r\n        setVisible(true);\r\n    };\r\n\r\n    const onClose = () => {\r\n        setCategory({slug:'', name:'', mode:'', images:[]});\r\n        setVisible(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        form.resetFields();\r\n    }, [category.mode])\r\n\r\n    return (\r\n        <>\r\n            <Button type=\"primary\" onClick={showDrawer}>\r\n                <PlusOutlined /> New category\r\n            </Button>\r\n            <Drawer\r\n                title={category.mode !== \"edit\" ? \"Create Category\" : \"Edit Category\"}\r\n                width={window.innerWidth > 768 ? 650 : window.innerWidth - 75}\r\n                placement=\"right\"\r\n                closable={true}\r\n                onClose={onClose}\r\n                visible={visible}\r\n            >\r\n                <Form\r\n                    form={form}\r\n                    layout=\"vertical\"\r\n                    name={category.mode !== \"edit\" ? \"Create Category\" : \"Edit Category\"}\r\n                    scrollToFirstError\r\n                >\r\n                    <Form.Item\r\n                        label=\"Category\"\r\n                        name=\"category\"\r\n                        rules={[{ required: true, message: 'Please input category name!' }]}\r\n                        initialValue={category.name}\r\n                    >\r\n                        <Input name=\"title\" allowClear onChange={e => setCategory({...category, name: e.target.value})} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Images\"\r\n                        name=\"images\"\r\n                        \r\n                    >\r\n                        <FileUpload productDetails={category} \r\n                            setProductDetails={setCategory} \r\n                            openNotificationWithIcon={openNotificationWithIcon} \r\n                            loading={loading}\r\n                            setLoading={setLoading}\r\n                        />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" loading={loading} onClick={category.mode !== \"edit\" ? createCategoryHandler : updateCategoryHandler}>\r\n                            Submit\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Drawer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CategoryForm\r\n","D:\\React\\techkart\\client\\src\\components\\Forms\\SubCategoryForm.js",["277"],"import React, { useEffect } from 'react';\r\nimport { Drawer, Form, Input, Button, Select } from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\n\r\nconst SubCategoryForm = ({setVisible, visible, createSubCategoryHandler, updateSubCategoryHandler, onChange, subCategory, setSubCategory, category, setCategory, categories, form}) => {\r\n    const showDrawer = () => {\r\n        if(subCategory.mode !== \"edit\"){\r\n            setSubCategory({slug:'', name:'', mode:'new'});\r\n            setCategory('');\r\n        }\r\n        setVisible(true);\r\n    };\r\n\r\n    const onClose = () => {\r\n        setSubCategory({slug:'', name:'', mode:'new'});\r\n        setCategory('');\r\n        setVisible(false);\r\n    }\r\n\r\n    const onFinish = () => {\r\n        form.resetFields();\r\n    }\r\n\r\n    useEffect(() => {\r\n        form.resetFields();\r\n    }, [subCategory.mode])\r\n\r\n    return (\r\n        <>\r\n            <Button type=\"primary\" onClick={showDrawer}>\r\n                <PlusOutlined /> New category\r\n            </Button>\r\n            <Drawer\r\n                title={subCategory.mode !== \"edit\" ? \"Create Sub Category\" : \"Edit Sub Category\"}\r\n                width={window.innerWidth > 768 ? 650 : window.innerWidth - 75}\r\n                placement=\"right\"\r\n                closable={true}\r\n                onClose={onClose}\r\n                visible={visible}\r\n                onFinish={onFinish}\r\n            >\r\n                <Form\r\n                    form={form}\r\n                    layout=\"vertical\"\r\n                    name={subCategory.mode !== \"edit\" ? \"Create Sub Category\" : \"Edit Sub Category\"}\r\n                    scrollToFirstError\r\n                >\r\n                    <Form.Item\r\n                        label=\"Category\"\r\n                        name=\"category\"\r\n                        rules={[{ required: true, message: 'Please select category name!' }]}\r\n                        initialValue={category}\r\n                    >\r\n                        <Select\r\n                            onChange={onChange}\r\n                            value={category}\r\n                            allowClear\r\n                        >\r\n                            {categories.length > 0 &&\r\n                            categories.map((c) => (\r\n                                <Select.Option key={c._id} value={c._id}>\r\n                                {c.name}\r\n                                </Select.Option>\r\n                            ))}\r\n                        </Select>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Sub Category\"\r\n                        name=\"subcategory\"\r\n                        rules={[{ required: true, message: 'Please input sub category name!' }]}\r\n                        initialValue={subCategory.name}\r\n                    >\r\n                        <Input allowClear value={subCategory} onChange={e => setSubCategory({...subCategory, name:e.target.value})}/>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" onClick={subCategory.mode !== \"edit\" ? createSubCategoryHandler : updateSubCategoryHandler}>\r\n                            Submit\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Drawer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SubCategoryForm;\r\n","D:\\React\\techkart\\client\\src\\components\\Auth\\PasswordReset\\PasswordReset.js",["278","279","280","281"],"import React, {useState} from 'react';\r\nimport { notification, Divider, Form, Input, Button, Checkbox } from 'antd';\r\nimport { ExclamationCircleOutlined, UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport {resetPassword} from '../../../utils/auth-util';\r\n\r\nconst PasswordReset = ({history, match}) => {\r\n    const [password, setPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const openNotificationWithIcon = (type, msgTitle, msgBody)  => {\r\n        notification[type]({\r\n          message: msgTitle,\r\n          description: msgBody\r\n        });\r\n    };\r\n\r\n    const resetPasswordHandler = async(e) => {\r\n        e.preventDefault();\r\n        if(password !== confirmPassword){\r\n            openNotificationWithIcon('error',\"Password mismatch\", \"Password and confirm password do not match.\");\r\n            setLoading(false);\r\n            return;\r\n        }\r\n        try{\r\n            setLoading(true);\r\n            await resetPassword(match.params.email, match.params.token, password);\r\n            openNotificationWithIcon('success', `Password updated successfully. Please LogIn!`, '');\r\n            history.push(\"/login\");\r\n        }\r\n        catch(err){\r\n            openNotificationWithIcon('error', 'Something went wrong', err.response.data.msg);\r\n        }\r\n        finally{\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"login-signup__container passwordreset__container\">\r\n            {/* <form onSubmit={resetPasswordHandler}>\r\n                <h2>Password Reset</h2>\r\n                <div className=\"login-signup__form-group\">\r\n                    <input type=\"password\" required=\"required\" value={password} onChange={(e) => setPassword(e.target.value)} />\r\n                    <label htmlFor=\"input\" className=\"login-signup__control-label\">New password</label><i className=\"login-signup__bar\"></i>\r\n                </div>\r\n                <div className=\"login-signup__form-group\">\r\n                    <input type=\"password\" required=\"required\" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)}/>\r\n                    <label htmlFor=\"input\" className=\"login-signup__control-label\">Confirm password</label><i className=\"login-signup__bar\"></i>\r\n                </div>\r\n                <button type=\"submit\" className=\"login-signup__button\" >Update Password</button>\r\n            </form> */}\r\n            <h2>Reset Password</h2>\r\n            <Form\r\n            name=\"normal_login\"\r\n            className=\"login-form\"\r\n            initialValues={{ remember: true }}\r\n            >\r\n            <Form.Item\r\n                name=\"password\"\r\n                rules={[{ required: true, message: \"Please input your Password!\" }]}\r\n            >\r\n                <Input\r\n                prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n            </Form.Item>\r\n            <Form.Item\r\n                    name=\"confirmpassword\"\r\n                    rules={[{ required: true, message: \"Please input your Confirm Password!\" }]}\r\n                >\r\n                    <Input\r\n                    prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                    type=\"password\"\r\n                    placeholder=\"Confirm Password\"\r\n                    value={confirmPassword}\r\n                    onChange={(e) => setConfirmPassword(e.target.value)}\r\n                    />\r\n            </Form.Item>\r\n\r\n            <Form.Item>\r\n                <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                className=\"login-form-button\"\r\n                block\r\n                onClick={resetPasswordHandler}\r\n                loading={loading}\r\n                >\r\n                    Update Password\r\n                </Button>\r\n            </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PasswordReset\r\n","D:\\React\\techkart\\client\\src\\components\\Auth\\PasswordReset\\ForgotPassword.js",["282","283","284"],"import React, {useState} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { notification, Divider, Form, Input, Button, Checkbox } from 'antd';\r\nimport { ExclamationCircleOutlined, UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport {forgotPassword} from '../../../utils/auth-util';\r\n\r\nconst ForgotPassword = ({history}) => {\r\n    const [email, setEmail] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const openNotificationWithIcon = (type, msgTitle, msgBody)  => {\r\n        notification[type]({\r\n          message: msgTitle,\r\n          description: msgBody\r\n        });\r\n    };\r\n\r\n    const forgotPasswordHandler = async(e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        try{\r\n            await forgotPassword(email);\r\n            openNotificationWithIcon('success', `Password reset email link sent to ${email}!`, '');\r\n            history.push(\"/login\");\r\n        }\r\n        catch(err){\r\n            openNotificationWithIcon('error', 'Something went wrong', err.response.data.msg);\r\n        }\r\n        finally{\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"login-signup__container forgotpassword__container\">\r\n            {/* <form onSubmit={forgotPasswordHandler}>\r\n                <h2>Password Reset</h2>\r\n                <div className=\"login-signup__form-group\">\r\n                    <input type=\"text\" required=\"required\" value={email} onChange={(e) => setEmail(e.target.value)} />\r\n                    <label htmlFor=\"input\" className=\"login-signup__control-label\">Your email</label><i className=\"login-signup__bar\"></i>\r\n                </div>\r\n                <button type=\"submit\" className=\"login-signup__button\" >Send Reset Link</button>\r\n                <Divider />\r\n                <p className=\"login-signup__not-already-member\">Remembered your password? <Link to=\"/login\">Sign In</Link></p>\r\n            </form> */}\r\n            <h2>Reset Password</h2>\r\n            <Form\r\n            name=\"normal_login\"\r\n            className=\"login-form\"\r\n            initialValues={{ remember: true }}\r\n            >\r\n            <Form.Item\r\n                name=\"username\"\r\n                rules={[{ required: true, message: \"Please input your Username!\" }]}\r\n            >\r\n                <Input\r\n                prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n                placeholder=\"Email\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                />\r\n            </Form.Item>\r\n\r\n            <Form.Item>\r\n                <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                className=\"login-form-button\"\r\n                block\r\n                onClick={forgotPasswordHandler}\r\n                loading={loading}\r\n                >\r\n                Send Reset Link\r\n                </Button>\r\n            </Form.Item>\r\n\r\n            <Divider />\r\n\r\n                <Form.Item>\r\n                    <span style={{float:'right'}}>Remembered your password? <Link to=\"/login\">Log In</Link></span>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ForgotPassword;\r\n","D:\\React\\techkart\\client\\src\\pages\\ManageCategories.js",["285"],"import React, {useEffect, useState} from 'react';\r\nimport {List, Card, Divider, notification, Popconfirm, Form, Empty} from 'antd';\r\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons';\r\nimport LeftNav from '../components/LeftNav/LeftNav';\r\nimport {create, fetchAll, update, remove} from '../utils/categories-util';\r\nimport {useSelector} from 'react-redux';\r\nimport CategoryForm from '../components/Forms/CategoryForm';\r\n\r\nconst ManageCategory = () => {\r\n    const [category, setCategory] = useState({slug:'', name:'', mode:'', images: []});\r\n    const [categories, setCategories] = useState([]);\r\n    const {user} = useSelector(state => ({...state}));\r\n    const [visible, setVisible] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const [form] = Form.useForm();\r\n    const {email, authtoken} = user;\r\n    const openNotificationWithIcon = (type, msgTitle, msgBody)  => {\r\n        notification[type]({\r\n          message: msgTitle,\r\n          description: msgBody\r\n        });\r\n    };\r\n\r\n    const links = [\r\n      {to:\"/dashboard/admin/categories\", title:\"Categories\"},\r\n      {to:\"/dashboard/admin/subcategories\", title:\"Sub Categories\"},\r\n      {to:\"/dashboard/admin/products\", title:\"Products\"},\r\n      {to:\"/dashboard/admin/bannerimages\", title:\"Banner Images\"},\r\n      {to:\"/dashboard/admin/orders\", title:\"Orders\"},\r\n    ];\r\n\r\n    const createCategoryHandler = async(e) => {\r\n        e.preventDefault();\r\n        if(category.name.length > 1 && category.name.length < 2) return openNotificationWithIcon('error','Category Length Error', 'Please ensure that the category name has at least 2 characters');\r\n        try{\r\n            await form.validateFields();\r\n            setLoading(true);\r\n            try{\r\n                const newCategory = await create(category.name, category.images, email, authtoken);\r\n                fetchCategories();\r\n                setCategory({slug:'', name:'', mode:'', images: []});\r\n                setVisible(false);\r\n                openNotificationWithIcon('success','Category Created', `${newCategory.data.category} created successfully!`)\r\n            }\r\n            catch(err){\r\n                openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n            }\r\n            finally{\r\n              setLoading(false);\r\n            }\r\n        }\r\n        catch(err){\r\n            \r\n        }\r\n    }\r\n\r\n    const updateCategoryHandler = async(e) => {\r\n        e.preventDefault();\r\n        if(category.name.length > 1 && category.name.length < 2) return openNotificationWithIcon('error','Category Length Error', 'Please ensure that the category name has at least 2 characters');\r\n        try{\r\n            await form.validateFields();\r\n            setLoading(true);\r\n            try{\r\n                const updatedCategory = await update(category.name, category.images, email, authtoken, category.slug);\r\n                fetchCategories();\r\n                setCategory({slug:'', name:'', mode:'', images: []});\r\n                setVisible(false);\r\n                openNotificationWithIcon('success','Category Updated', `${updatedCategory.data.category} updated successfully!`)\r\n            }\r\n            catch(err){\r\n                openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n            }\r\n            finally{\r\n              setLoading(false);\r\n            }\r\n        }\r\n        catch(err){\r\n\r\n        }\r\n    }\r\n\r\n    const fetchCategories = async() => {\r\n        try{\r\n            const categories = await fetchAll();\r\n            setCategories(categories.data);\r\n        }\r\n        catch(err){\r\n            openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n        }\r\n    }\r\n\r\n    const removeCategoryHandler = async(slug) => {\r\n        try{\r\n            const category = await remove(authtoken, slug, email);\r\n            openNotificationWithIcon('success','Category Deleted', `${category.data.msg}!`)\r\n            fetchCategories();\r\n        }\r\n        catch(err){\r\n            openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n        }\r\n    }\r\n\r\n    const editCategory = async({name, slug, mode}) => {\r\n        let productImages = categories.find(c => c.slug===slug);\r\n        productImages = productImages.images;\r\n        setCategory({...category, slug, name, mode: \"edit\", images: productImages});\r\n        setVisible(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchCategories();\r\n    }, [])\r\n    return (\r\n      <>\r\n        <div className=\"admin__wrapper\">\r\n          <div className=\"main__leftnav\">\r\n                <LeftNav links={links} title=\"Admin Dashboard\" active=\"/dashboard/admin/categories\" />\r\n          </div>\r\n          <div className=\"admin__content\">\r\n            <CategoryForm\r\n              category={category}\r\n              setCategory={setCategory}\r\n              visible={visible}\r\n              setVisible={setVisible}\r\n              createCategoryHandler={createCategoryHandler}\r\n              updateCategoryHandler={updateCategoryHandler}\r\n              form={form}\r\n              loading={loading}\r\n              setLoading={setLoading}\r\n              openNotificationWithIcon={openNotificationWithIcon}\r\n            />\r\n            <Divider />\r\n            {categories.length > 0 ? (\r\n              <List\r\n                grid={{\r\n                  gutter: 16,\r\n                  xs: 1,\r\n                  sm: 2,\r\n                  md: 2,\r\n                  lg: 4,\r\n                  xl: 4,\r\n                  xxl: 4,\r\n                }}\r\n                dataSource={categories}\r\n                renderItem={(item) => (\r\n                  <List.Item>\r\n                    <Card\r\n                      actions={[\r\n                        <EditOutlined\r\n                          key=\"edit\"\r\n                          onClick={() =>\r\n                            editCategory({\r\n                              ...category,\r\n                              slug: item.slug,\r\n                              name: item.name,\r\n                            })\r\n                          }\r\n                        />,\r\n                        <Popconfirm\r\n                          title=\"Are you sure to delete this category?\"\r\n                          onConfirm={() => removeCategoryHandler(item.slug)}\r\n                          okText=\"Yes\"\r\n                          cancelText=\"No\"\r\n                        >\r\n                          <DeleteOutlined key=\"ellipsis\" />\r\n                        </Popconfirm>,\r\n                      ]}\r\n                    >\r\n                      {item.name}\r\n                    </Card>\r\n                  </List.Item>\r\n                )}\r\n              />\r\n            ) : (\r\n              <Empty\r\n                image=\"https://gw.alipayobjects.com/zos/antfincdn/ZHrcdLPrvN/empty.svg\"\r\n                imageStyle={{\r\n                  height: 60,\r\n                }}\r\n                description={<span>No categories found!</span>}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n}\r\n\r\nexport default ManageCategory;","D:\\React\\techkart\\client\\src\\pages\\Dashboard.js",["286","287"],"D:\\React\\techkart\\client\\src\\Hooks\\useWindowDimensions.js",[],"D:\\React\\techkart\\client\\src\\components\\SiteFooter\\SiteFooter.js",[],"D:\\React\\techkart\\client\\src\\components\\Card\\ProductCard\\ProductCard.js",["288","289","290"],"D:\\React\\techkart\\client\\src\\components\\Card\\FooterCard\\FooterCard.js",[],"D:\\React\\techkart\\client\\src\\pages\\ProductPage.js",["291","292","293","294","295"],"D:\\React\\techkart\\client\\src\\Reducers\\searchReducer.js",[],"D:\\React\\techkart\\client\\src\\pages\\Shop.js",["296","297","298","299","300"],"D:\\React\\techkart\\client\\src\\Reducers\\cartReducer.js",[],"D:\\React\\techkart\\client\\src\\pages\\Cart.js",["301","302","303"],"D:\\React\\techkart\\client\\src\\Reducers\\drawerReducer.js",[],"D:\\React\\techkart\\client\\src\\components\\CartDrawer\\CartDrawer.js",["304"],"D:\\React\\techkart\\client\\src\\pages\\Checkout.js",["305","306"],"D:\\React\\techkart\\client\\src\\utils\\user-util.js",[],"D:\\React\\techkart\\client\\src\\components\\Forms\\AddressForm.js",["307","308"],"import React, { useEffect, useState } from 'react';\r\nimport { Drawer, Form, Input, Button } from 'antd';\r\n\r\nconst AddressForm = ({visible, setVisible, form, address, setAddress, loading, addAddressHandler}) => {\r\n    \r\n    let jsonAddress = {name: '', mobile:'', pinCode:'', streetAdd:'', locality:'', City:'', State:''}; \r\n    if(address.deliveryAddress !== \"\" && address.deliveryAddress !== undefined)\r\n        jsonAddress = JSON.parse(address.deliveryAddress);\r\n\r\n    const showDrawer = () => {\r\n        if(address.mode !== \"edit\") setAddress({deliveryAddress:'', mode:''})\r\n        setVisible(true);\r\n    };\r\n\r\n    const onClose = () => {\r\n        setAddress({deliveryAddress:'', mode:''});\r\n        setVisible(false);\r\n    }\r\n\r\n    const onChangeHandler = (e) => {\r\n        setAddress({...address, deliveryAddress : JSON.stringify({...jsonAddress, [e.target.name]: e.target.value})});\r\n    }\r\n\r\n    useEffect(() => {\r\n        form.resetFields();\r\n    }, [address.mode]);\r\n\r\n    return (\r\n        <>\r\n            {address.mode !== \"edit\" && <Button type=\"primary\" className=\"checkout__addnewaddress\" size=\"default\" onClick={showDrawer}>ADD NEW ADDRESS</Button>}\r\n            <Drawer\r\n                title={address.mode !== \"edit\" ? \"Add Address\" : \"Edit Address\"}\r\n                width={window.innerWidth > 768 ? 500 : window.innerWidth - 75}\r\n                placement=\"right\"\r\n                closable={true}\r\n                onClose={onClose}\r\n                visible={visible}\r\n            >\r\n                <Form\r\n                    form={form}\r\n                    layout=\"vertical\"\r\n                    name={address.mode !== \"edit\" ? \"Add Address\" : \"Edit Address\"}\r\n                    scrollToFirstError\r\n                >\r\n                    <Form.Item\r\n                        label=\"Name\"\r\n                        name=\"name\"\r\n                        rules={[{ required: true, message: 'Please input name!' }]}\r\n                        initialValue={jsonAddress.name}\r\n                    >\r\n                        <Input name=\"name\" allowClear onChange={onChangeHandler} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Mobile\"\r\n                        name=\"mobile\"\r\n                        rules={[{ required: true, message: 'Please input mobile number!' }]}\r\n                        initialValue={jsonAddress.mobile}\r\n                    >\r\n                        <Input name=\"mobile\" allowClear onChange={onChangeHandler} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Pin Code\"\r\n                        name=\"pinCode\"\r\n                        rules={[{ required: true, message: 'Please input pin code!' }]}\r\n                        initialValue={jsonAddress.pinCode}\r\n                    >\r\n                        <Input name=\"pinCode\" allowClear onChange={onChangeHandler} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Street Address\"\r\n                        name=\"streetAdd\"\r\n                        rules={[{ required: true, message: 'Please input street address!' }]}\r\n                        initialValue={jsonAddress.streetAdd}\r\n                    >\r\n                        <Input.TextArea rows={2} name=\"streetAdd\" allowClear onChange={onChangeHandler} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Locality/ Town\"\r\n                        name=\"locality\"\r\n                        rules={[{ required: true, message: 'Please input locality/ town!' }]}\r\n                        initialValue={jsonAddress.locality}\r\n                    >\r\n                        <Input name=\"locality\" allowClear onChange={onChangeHandler} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"City\"\r\n                        name=\"city\"\r\n                        rules={[{ required: true, message: 'Please input city!' }]}\r\n                        initialValue={jsonAddress.city}\r\n                    >\r\n                        <Input name=\"city\" allowClear onChange={onChangeHandler} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"State\"\r\n                        name=\"state\"\r\n                        rules={[{ required: true, message: 'Please input state!' }]}\r\n                        initialValue={jsonAddress.state}\r\n                    >\r\n                        <Input name=\"state\" allowClear onChange={onChangeHandler} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" onClick={addAddressHandler} loading={loading}>\r\n                            Submit\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Drawer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddressForm;\r\n","D:\\React\\techkart\\client\\src\\components\\StepWizard\\StepWizard.js",["309","310"],"import React, {useState, useEffect} from 'react';\r\nimport { Steps } from 'antd';\r\nimport {useLocation, useHistory} from 'react-router-dom';\r\nimport {useSelector} from 'react-redux';\r\n\r\nimport './StepWizard.css';\r\n\r\nconst StepWizard = () => {\r\n    const { Step } = Steps;\r\n\r\n    const [step, setStep] = useState(0);\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    const {user} = useSelector(state => ({...state}));\r\n\r\n    const getStepValue = () => {\r\n        if(location.pathname === \"/cart\") setStep(0);\r\n        if(user && location.pathname === \"/checkout\") setStep(1);\r\n        if(user && location.pathname === \"/payment\") setStep(2);\r\n    }\r\n\r\n    const stepChangeHandler = current => {\r\n        // if(current === 0){\r\n        //     history.push(\"/cart\");\r\n        //     setStep(current);\r\n        // } \r\n        // if(user && current === 1){\r\n        //     history.push(\"/checkout\");\r\n        //     setStep(current);\r\n        // }\r\n        // if(user && current === 2){\r\n        //     history.push(\"/payment\");\r\n        //     setStep(current);\r\n        // }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getStepValue();\r\n    }, [])\r\n\r\n    return (\r\n        <Steps className=\"site-navigation-steps\" onChange={stepChangeHandler} current={step} style={{maxWidth:'1300px', margin:'0 auto', padding:'30px 16px 15px 16px'}} type=\"navigation\" size=\"small\">\r\n            <Step title=\"Cart\"></Step>\r\n            <Step title=\"Checkout\"></Step>\r\n            <Step title=\"Payment\"></Step>\r\n        </Steps>\r\n    )\r\n}\r\n\r\nexport default StepWizard;\r\n","D:\\React\\techkart\\client\\src\\pages\\Payment.js",[],"D:\\React\\techkart\\client\\src\\components\\StripeCheckout\\StripeCheckout.js",["311"],"D:\\React\\techkart\\client\\src\\utils\\stripe-util.js",[],"D:\\React\\techkart\\client\\src\\utils\\order-util.js",[],"D:\\React\\techkart\\client\\src\\pages\\Orders.js",["312","313"],"import React, {useState, useEffect} from 'react';\r\nimport LeftNav from '../components/LeftNav/LeftNav';\r\nimport { Tag, Tooltip, Collapse, Image, Divider } from 'antd';\r\nimport { CodeSandboxOutlined, CheckCircleOutlined, SyncOutlined, CloseCircleOutlined, ClockCircleOutlined } from '@ant-design/icons';\r\nimport {fetchAllOrders} from '../utils/order-util';\r\nimport {useSelector} from 'react-redux';\r\nimport CurrencyFormat from 'react-currency-format'; \r\nimport emptyOrders from '../assets/images/Empty_Orders.svg';\r\n\r\nimport './Styles/Orders.css';\r\n\r\nconst Orders = () => {\r\n    const [orders, setOrders] = useState([]);\r\n    const links = [\r\n        {to:\"/my/profile\", title:\"Profile\"},\r\n        {to:\"/my/passwordupdate\", title:\"Update Password\"},\r\n        {to:\"/my/wishlist\", title:\"Wishlist\"},\r\n        {to:\"/my/orders\", title:\"Orders\"},\r\n    ];\r\n\r\n    const { Panel } = Collapse;\r\n\r\n    const {user} = useSelector(state => ({...state}));\r\n    let authtoken, email, purchasedBy;\r\n    if(user){\r\n        authtoken = user.authtoken;\r\n        email = user.email;\r\n        purchasedBy = user._id;\r\n    }\r\n\r\n    const getAllOrders = async() => {\r\n        try{\r\n            const orders = await fetchAllOrders(email, authtoken, purchasedBy);\r\n            setOrders(orders.data);\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const orderStatus = status => {\r\n        if(status === \"Not Processed\") return <Tag style={{marginTop:'10px'}} icon={<ClockCircleOutlined />} color=\"warning\">Not Processed</Tag>\r\n        if(status === \"Shipped\") return <Tag style={{marginTop:'10px'}} icon={<SyncOutlined spin />} color=\"processing\">Shipped</Tag>\r\n        if(status === \"Delivered\") return <Tag style={{marginTop:'10px'}} icon={<CheckCircleOutlined />} color=\"success\">Delivered</Tag>\r\n        if(status === \"Failed\") return <Tag style={{marginTop:'10px'}} icon={<CloseCircleOutlined />} color=\"error\">Order Failed</Tag>\r\n    }\r\n\r\n    const displayOrders = () => {\r\n        return orders.map((o,i) => {\r\n            return <Collapse key={o._id} className=\"orders__wrapper\" defaultActiveKey={['0']} ghost style={{background:'#fff', padding:'0px 16px', marginTop:'16px'}} expandIconPosition=\"right\"> \r\n                <Panel header={<p><CodeSandboxOutlined style={{marginRight:'10px'}} />Order No - <span style={{fontWeight:'600'}}>{o._id}</span> / Order Date - <span style={{fontWeight:'600'}}>{new Date(o.createdAt).toDateString()}</span> / Total - <span style={{fontWeight:'600'}}><CurrencyFormat value={o.paymentIntent.amount/100} displayType={'text'} thousandSeparator={true} prefix={'$'} renderText={value => <span>{value}</span>} /></span><br />{orderStatus(o.orderStatus)}</p>} key={i}>\r\n                    {o.products.map((c,index) => {\r\n                        return <div key={c._id}><div className=\"orders__products-wrapper\">\r\n                            <div className=\"orders__products-img\"><Image src={c.images[0].url} /></div>\r\n                            <div className=\"orders__products-title\">\r\n                                <div><Tooltip title={c.title}><p>{c.title.substring(0,80)}...</p></Tooltip></div>\r\n                                <div style={{fontSize:'0.8rem', color:'#757575'}}>Price : <CurrencyFormat value={c.price} displayType={'text'} thousandSeparator={true} prefix={'$'} renderText={value => <span>{value}</span>} /> * {c.count} = <CurrencyFormat value={c.count * c.price} displayType={'text'} thousandSeparator={true} prefix={'$'} renderText={value => <span>{value}</span>} /></div>\r\n                            </div>\r\n                        </div>{index === o.products.length-1 ? null : <Divider />}</div>\r\n                    })}\r\n                </Panel>\r\n                \r\n        </Collapse>});\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAllOrders();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"main__wrapper\">\r\n            <div className=\"main__leftnav\">\r\n                <LeftNav links={links} title=\"Account\" active=\"/my/orders\" />\r\n            </div>\r\n            <div className=\"main__content\">\r\n                {orders && orders.length > 0 ? displayOrders() : <div className=\"orders__empty\"><div><img src={emptyOrders} /><p>Your order history is empty!</p></div></div> } \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Orders;\r\n","D:\\React\\techkart\\client\\src\\components\\LeftNav\\LeftNav.js",[],"D:\\React\\techkart\\client\\src\\pages\\UpdatePassword.js",[],"D:\\React\\techkart\\client\\src\\pages\\Wishlist.js",["314"],"import React, {useState, useEffect} from 'react';\r\nimport {useSelector} from 'react-redux';\r\n\r\nimport LeftNav from '../components/LeftNav/LeftNav';\r\nimport {getWishlist, removeWishlist} from '../utils/user-util';\r\nimport { Tooltip, Card , Image, notification } from 'antd';\r\nimport { DeleteFilled } from '@ant-design/icons';\r\nimport CurrencyFormat from 'react-currency-format'; \r\nimport emptyWishlist from '../assets/images/Empty_Wishlist.svg';\r\nimport './Styles/Wishlist.css';\r\n\r\nconst Wishlist = ({history}) => {\r\n    const [wishlist, setWishlist] = useState([]);\r\n\r\n    const links = [\r\n        {to:\"/my/profile\", title:\"Profile\"},\r\n        {to:\"/my/passwordupdate\", title:\"Update Password\"},\r\n        {to:\"/my/wishlist\", title:\"Wishlist\"},\r\n        {to:\"/my/orders\", title:\"Orders\"},\r\n    ];\r\n\r\n    const openNotificationWithIcon = (type, msgTitle, msgBody)  => {\r\n        notification[type]({\r\n          message: msgTitle,\r\n          description: msgBody\r\n        });\r\n    };\r\n\r\n    const {user} = useSelector(state => ({...state}));\r\n    let authtoken, email;\r\n    if(user){\r\n        authtoken = user.authtoken;\r\n        email = user.email;\r\n    }\r\n    \r\n    const getUserWishlist = async() => {\r\n        try{\r\n            const user = await getWishlist(email, authtoken);\r\n            setWishlist(user.data.user.wishlist);\r\n        }\r\n        catch(err){\r\n            openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n        }\r\n    }\r\n\r\n    const wishlistProductHandler = p => {\r\n        history.push(`/product/${p.slug}`);\r\n    }\r\n\r\n    const wishlistRemoveHandler = async(p) => {\r\n        try{\r\n            await removeWishlist(email, authtoken, p._id);\r\n            let updatedWishlist = [...wishlist];\r\n            openNotificationWithIcon('success','Product removed from wishlist', '');\r\n            setWishlist(updatedWishlist.filter(w => w._id !== p._id));\r\n        }\r\n        catch(err){\r\n            openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getUserWishlist();\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"main__wrapper\">\r\n            <div className=\"main__leftnav\">\r\n                <LeftNav links={links} title=\"Account\" active=\"/my/wishlist\" />\r\n            </div>\r\n            <div className=\"main__content\">\r\n                <div className=\"wishlist__wrapper\">\r\n                    {wishlist && wishlist.length > 0 ? wishlist.map((c) => {\r\n                        return <Card key={c._id}><div className=\"orders__products-wrapper wishlist__card\">\r\n                                    <div className=\"orders__products-img\"><Image src={c.images[0].url} /></div>\r\n                                    <div className=\"orders__products-title wishlist__product-title\">\r\n                                        <div onClick={() => wishlistProductHandler(c)}><Tooltip title={c.title}><p>{c.title.substring(0,80)}...</p></Tooltip></div>\r\n                                        <div style={{fontSize:'0.8rem', color:'#757575',fontWeight:'600'}}>\r\n                                            <CurrencyFormat value={c.price} displayType={'text'} thousandSeparator={true} prefix={'$'} renderText={value => <span className=\"wishlist__price\">{value}</span>} />\r\n                                            <DeleteFilled className=\"wishlist__delete\" onClick={() => wishlistRemoveHandler(c)} />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div>\r\n                                    </div>\r\n                                </div>\r\n                            </Card>\r\n                    }) : <div className=\"orders__empty\"><div><img src={emptyWishlist} alt=\"Empty wishlist\" /><p>Your wishlist is empty!</p></div></div>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Wishlist;\r\n","D:\\React\\techkart\\client\\src\\pages\\Profile.js",["315","316"],"import React, {useState, useEffect} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport LeftNav from '../components/LeftNav/LeftNav';\r\nimport { Form, Input, Button, notification, Radio } from 'antd';\r\nimport { getCart, updateUserProfile } from '../utils/user-util';\r\n\r\nimport './Styles/Profile.css';\r\nimport './Styles/Orders.css';\r\n\r\nconst Profile = () => {\r\n    const [userProfile, setUserProfile] = useState({name:'', email:'', mobile:'', gender:'', location:''});\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const {user} = useSelector(state => ({...state}));\r\n    const {email, authtoken} = user;\r\n\r\n    const [form] = Form.useForm();\r\n    \r\n    const links = [\r\n        {to:\"/my/profile\", title:\"Profile\"},\r\n        {to:\"/my/passwordupdate\", title:\"Update Password\"},\r\n        {to:\"/my/wishlist\", title:\"Wishlist\"},\r\n        {to:\"/my/orders\", title:\"Orders\"},\r\n    ];\r\n\r\n    const openNotificationWithIcon = (type, msgTitle, msgBody)  => {\r\n        notification[type]({\r\n          message: msgTitle,\r\n          description: msgBody\r\n        });\r\n    };\r\n\r\n    const getUserProfileDetails = async() => {\r\n        try{\r\n            setLoading(true);\r\n            const user = await getCart(email, authtoken);\r\n            let mobile, gender, location;\r\n            user.data.mobile === undefined ? mobile = '' : mobile = user.data.mobile;\r\n            user.data.gender === undefined ? gender = '' : gender = user.data.gender;\r\n            user.data.location === undefined ? location = '' : location = user.data.location;\r\n            setUserProfile({name: user.data.name, email: user.data.email, mobile, gender, location});\r\n        }\r\n        catch(err){\r\n            openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n        }\r\n        finally{\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    const updateUserProfileHandler = async(e) => {\r\n        e.preventDefault();\r\n        try{\r\n            const user = await updateUserProfile(email, authtoken, userProfile);\r\n            let mobile, gender, location;\r\n            user.data.mobile === undefined ? mobile = '' : mobile = user.data.mobile;\r\n            user.data.gender === undefined ? gender = '' : gender = user.data.gender;\r\n            user.data.location === undefined ? location = '' : location = user.data.location;\r\n            setUserProfile({name: user.data.name, email: user.data.email, mobile, gender, location});\r\n            openNotificationWithIcon('success','User profile updated successfully', '');\r\n        }\r\n        catch(err){\r\n            openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getUserProfileDetails();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        form.resetFields();\r\n    }, [loading]);\r\n\r\n    return (\r\n        <div className=\"main__wrapper\">\r\n            <div className=\"main__leftnav\">\r\n                <LeftNav links={links} title=\"Account\" active=\"/my/profile\" />\r\n            </div>\r\n            <div className=\"main__content\">\r\n                <Form\r\n                    className=\"passwordupdate__form\"\r\n                    layout=\"vertical\"\r\n                    name=\"Update Profile\"\r\n                    scrollToFirstError\r\n                    form={form}\r\n                >\r\n                    <Form.Item\r\n                        label=\"Name\"\r\n                        name=\"name\"\r\n                        rules={[{ required: true, message: 'Please input your name!' }]}\r\n                        initialValue={userProfile.name}\r\n                    >\r\n                        <Input name=\"name\" value={userProfile.name} allowClear onChange={(e) => setUserProfile({...userProfile,[e.target.name]:e.target.value})} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Email\"\r\n                        name=\"email\"\r\n                        initialValue={userProfile.email}\r\n                    >\r\n                        <Input name=\"email\" allowClear value={userProfile.email} disabled />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Mobile\"\r\n                        name=\"mobile\"\r\n                        initialValue={userProfile.mobile}\r\n                    >\r\n                        <Input name=\"mobile\" allowClear value={userProfile.mobile} onChange={(e) => setUserProfile({...userProfile,[e.target.name]:e.target.value})} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Gender\"\r\n                        name=\"gender\"\r\n                        initialValue={userProfile.gender}\r\n                    >\r\n                        <Radio.Group name=\"gender\" onChange={(e) => setUserProfile({...userProfile,[e.target.name]:e.target.value})}>\r\n                            <Radio.Button value=\"Male\">Male</Radio.Button>\r\n                            <Radio.Button value=\"Female\">Female</Radio.Button>\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Location\"\r\n                        name=\"location\"\r\n                        initialValue={userProfile.location}\r\n                    >\r\n                        <Input name=\"location\" allowClear value={userProfile.location} onChange={(e) => setUserProfile({...userProfile,[e.target.name]:e.target.value})} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" onClick={updateUserProfileHandler} loading={loading}>\r\n                            Save\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n","D:\\React\\techkart\\client\\src\\pages\\ManageOrders.js",["317","318","319"],"import React, {useState, useEffect} from 'react';\r\nimport LeftNav from '../components/LeftNav/LeftNav';\r\nimport { Button, Tooltip, Collapse, Image, Divider, Select, notification } from 'antd';\r\nimport { CodeSandboxOutlined } from '@ant-design/icons';\r\nimport {useSelector} from 'react-redux';\r\nimport CurrencyFormat from 'react-currency-format'; \r\nimport emptyOrders from '../assets/images/Empty_Orders.svg';\r\n\r\nimport { fetchAllOrdersAdmin, updateOrderAdmin } from '../utils/order-util';\r\n\r\nimport './Styles/Orders.css';\r\n\r\nconst ManageOrders = () => {\r\n    const [orders, setOrders] = useState([]);\r\n    const [updateOrder, setUpdateOrder] = useState({status:'', _id:''});\r\n    const [activeCollapse, setActiveCollapse] = useState('0');\r\n    const links = [\r\n        {to:\"/dashboard/admin/categories\", title:\"Categories\"},\r\n        {to:\"/dashboard/admin/subcategories\", title:\"Sub Categories\"},\r\n        {to:\"/dashboard/admin/products\", title:\"Products\"},\r\n        {to:\"/dashboard/admin/bannerimages\", title:\"Banner Images\"},\r\n        {to:\"/dashboard/admin/orders\", title:\"Orders\"},\r\n    ];\r\n\r\n    const openNotificationWithIcon = (type, msgTitle, msgBody)  => {\r\n        notification[type]({\r\n          message: msgTitle,\r\n          description: msgBody\r\n        });\r\n    };\r\n    const { Panel } = Collapse;\r\n    const { Option } = Select;\r\n\r\n    const {user} = useSelector(state => ({...state}));\r\n    let authtoken, email;\r\n    if(user){\r\n        authtoken = user.authtoken;\r\n        email = user.email;\r\n    }\r\n\r\n    function orderStatusChangeHandler(value, e) {\r\n        setUpdateOrder({...updateOrder, status: value, _id:e.orderid});\r\n    }\r\n\r\n    const collapseOnChangeHandler = (key) => {\r\n        setActiveCollapse(key.pop());\r\n        setUpdateOrder({status:'', _id:''});\r\n    }\r\n\r\n    const updateOrderStatusHandler = async(e) => {\r\n        e.preventDefault();\r\n        try{\r\n            const updatedOrder = await updateOrderAdmin(email, authtoken, updateOrder._id, updateOrder.status);\r\n            setUpdateOrder({status:'', _id:''});\r\n            openNotificationWithIcon('success','Order status updated successfully!', '');\r\n        }\r\n        catch(err){\r\n            openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n        }\r\n    }\r\n\r\n    const getAllOrdersAdmin = async() => {\r\n        try{\r\n            const orders = await fetchAllOrdersAdmin(email, authtoken);\r\n            setOrders(orders.data);\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const displayOrders = () => {\r\n        return orders.map((o,i) => {\r\n            return <Collapse activeKey={activeCollapse} onChange={collapseOnChangeHandler} key={o._id} className=\"orders__wrapper\" defaultActiveKey={['0']} ghost style={{background:'#fff', padding:'0px 16px', marginTop:'16px'}} expandIconPosition=\"right\"> \r\n                <Panel header={<p><CodeSandboxOutlined style={{marginRight:'10px'}} />Order No - <span style={{fontWeight:'600'}}>{o._id}</span> / Order Date - <span style={{fontWeight:'600'}}>{new Date(o.createdAt).toDateString()}</span> / Total - <span style={{fontWeight:'600'}}><CurrencyFormat value={o.paymentIntent.amount/100} displayType={'text'} thousandSeparator={true} prefix={'$'} renderText={value => <span>{value}</span>} /></span><br />\r\n                </p>} key={i}>\r\n                <Select defaultValue={o.orderStatus} style={{ width: 150, marginBottom:'20px', marginRight:'20px' }} onChange={orderStatusChangeHandler}>\r\n                    <Option value=\"Not Processed\" orderid={o._id}>Not Processed</Option>\r\n                    <Option value=\"Shipped\" orderid={o._id}>Shipped</Option>\r\n                    <Option value=\"Delivered\" orderid={o._id}>Delivered</Option>\r\n                    <Option value=\"Failed\" orderid={o._id}>Failed</Option>\r\n                </Select>\r\n                <Button type=\"primary\" onClick={updateOrderStatusHandler}>Update</Button>\r\n                    {o.products.map((c,index) => {\r\n                        return <div key={c._id}><div className=\"orders__products-wrapper\">\r\n                            <div className=\"orders__products-img\"><Image src={c.images[0].url} /></div>\r\n                            <div className=\"orders__products-title\">\r\n                                <div><Tooltip title={c.title}><p>{c.title.substring(0,80)}...</p></Tooltip></div>\r\n                                <div style={{fontSize:'0.8rem', color:'#757575'}}>Price : <CurrencyFormat value={c.price} displayType={'text'} thousandSeparator={true} prefix={'$'} renderText={value => <span>{value}</span>} /> * {c.count} = <CurrencyFormat value={c.count * c.price} displayType={'text'} thousandSeparator={true} prefix={'$'} renderText={value => <span>{value}</span>} /></div>\r\n                            </div>\r\n                        </div>{index === o.products.length-1 ? null : <Divider />}</div>\r\n                    })}\r\n                </Panel>\r\n                \r\n        </Collapse>});\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAllOrdersAdmin();\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"main__wrapper admin__wrapper\">\r\n            <div className=\"main__leftnav\">\r\n                <LeftNav links={links} title=\"Admin Dashboard\" active=\"/dashboard/admin/orders\" />\r\n            </div>\r\n            <div className=\"main__content\">\r\n                {orders && orders.length > 0 ? displayOrders() : <div className=\"orders__empty\"><div><img src={emptyOrders} /><p>Your order history is empty!</p></div></div> } \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ManageOrders;\r\n","D:\\React\\techkart\\client\\src\\components\\ScrollToTop\\ScrollToTop.js",[],{"ruleId":"320","replacedBy":"321"},{"ruleId":"322","replacedBy":"323"},{"ruleId":"324","severity":1,"message":"325","line":37,"column":10,"nodeType":"326","messageId":"327","endLine":37,"endColumn":14},{"ruleId":"328","severity":1,"message":"329","line":87,"column":6,"nodeType":"330","endLine":87,"endColumn":8,"suggestions":"331"},{"ruleId":"324","severity":1,"message":"332","line":12,"column":13,"nodeType":"326","messageId":"327","endLine":12,"endColumn":19},{"ruleId":"324","severity":1,"message":"333","line":47,"column":17,"nodeType":"326","messageId":"327","endLine":47,"endColumn":20},{"ruleId":"328","severity":1,"message":"334","line":98,"column":8,"nodeType":"330","endLine":98,"endColumn":14,"suggestions":"335"},{"ruleId":"324","severity":1,"message":"336","line":3,"column":24,"nodeType":"326","messageId":"327","endLine":3,"endColumn":29},{"ruleId":"324","severity":1,"message":"337","line":3,"column":52,"nodeType":"326","messageId":"327","endLine":3,"endColumn":60},{"ruleId":"324","severity":1,"message":"338","line":4,"column":10,"nodeType":"326","messageId":"327","endLine":4,"endColumn":35},{"ruleId":"324","severity":1,"message":"333","line":19,"column":13,"nodeType":"326","messageId":"327","endLine":19,"endColumn":16},{"ruleId":"324","severity":1,"message":"333","line":43,"column":17,"nodeType":"326","messageId":"327","endLine":43,"endColumn":20},{"ruleId":"328","severity":1,"message":"339","line":60,"column":8,"nodeType":"330","endLine":60,"endColumn":10,"suggestions":"340"},{"ruleId":"320","replacedBy":"341"},{"ruleId":"322","replacedBy":"342"},{"ruleId":"324","severity":1,"message":"343","line":20,"column":12,"nodeType":"326","messageId":"327","endLine":20,"endColumn":26},{"ruleId":"324","severity":1,"message":"344","line":20,"column":28,"nodeType":"326","messageId":"327","endLine":20,"endColumn":45},{"ruleId":"324","severity":1,"message":"345","line":22,"column":13,"nodeType":"326","messageId":"327","endLine":22,"endColumn":19},{"ruleId":"328","severity":1,"message":"346","line":128,"column":8,"nodeType":"330","endLine":128,"endColumn":10,"suggestions":"347"},{"ruleId":"324","severity":1,"message":"348","line":31,"column":12,"nodeType":"326","messageId":"327","endLine":31,"endColumn":19},{"ruleId":"324","severity":1,"message":"349","line":31,"column":21,"nodeType":"326","messageId":"327","endLine":31,"endColumn":31},{"ruleId":"324","severity":1,"message":"350","line":33,"column":20,"nodeType":"326","messageId":"327","endLine":33,"endColumn":29},{"ruleId":"328","severity":1,"message":"351","line":117,"column":8,"nodeType":"330","endLine":117,"endColumn":10,"suggestions":"352"},{"ruleId":"328","severity":1,"message":"353","line":122,"column":8,"nodeType":"330","endLine":122,"endColumn":14,"suggestions":"354"},{"ruleId":"355","severity":1,"message":"356","line":156,"column":46,"nodeType":"357","endLine":157,"endColumn":47},{"ruleId":"324","severity":1,"message":"358","line":5,"column":58,"nodeType":"326","messageId":"327","endLine":5,"endColumn":64},{"ruleId":"328","severity":1,"message":"359","line":106,"column":8,"nodeType":"330","endLine":106,"endColumn":10,"suggestions":"360"},{"ruleId":"324","severity":1,"message":"361","line":1,"column":17,"nodeType":"326","messageId":"327","endLine":1,"endColumn":25},{"ruleId":"324","severity":1,"message":"362","line":5,"column":33,"nodeType":"326","messageId":"327","endLine":5,"endColumn":38},{"ruleId":"324","severity":1,"message":"363","line":5,"column":49,"nodeType":"326","messageId":"327","endLine":5,"endColumn":61},{"ruleId":"324","severity":1,"message":"363","line":2,"column":60,"nodeType":"326","messageId":"327","endLine":2,"endColumn":72},{"ruleId":"328","severity":1,"message":"364","line":83,"column":8,"nodeType":"330","endLine":83,"endColumn":29,"suggestions":"365"},{"ruleId":"328","severity":1,"message":"366","line":19,"column":8,"nodeType":"330","endLine":19,"endColumn":23,"suggestions":"367"},{"ruleId":"328","severity":1,"message":"366","line":26,"column":8,"nodeType":"330","endLine":26,"endColumn":26,"suggestions":"368"},{"ruleId":"324","severity":1,"message":"369","line":2,"column":24,"nodeType":"326","messageId":"327","endLine":2,"endColumn":31},{"ruleId":"324","severity":1,"message":"337","line":2,"column":54,"nodeType":"326","messageId":"327","endLine":2,"endColumn":62},{"ruleId":"324","severity":1,"message":"338","line":3,"column":10,"nodeType":"326","messageId":"327","endLine":3,"endColumn":35},{"ruleId":"324","severity":1,"message":"370","line":3,"column":37,"nodeType":"326","messageId":"327","endLine":3,"endColumn":49},{"ruleId":"324","severity":1,"message":"337","line":3,"column":54,"nodeType":"326","messageId":"327","endLine":3,"endColumn":62},{"ruleId":"324","severity":1,"message":"338","line":4,"column":10,"nodeType":"326","messageId":"327","endLine":4,"endColumn":35},{"ruleId":"324","severity":1,"message":"371","line":4,"column":51,"nodeType":"326","messageId":"327","endLine":4,"endColumn":63},{"ruleId":"328","severity":1,"message":"351","line":113,"column":8,"nodeType":"330","endLine":113,"endColumn":10,"suggestions":"372"},{"ruleId":"328","severity":1,"message":"373","line":106,"column":8,"nodeType":"330","endLine":106,"endColumn":10,"suggestions":"374"},{"ruleId":"355","severity":1,"message":"356","line":153,"column":42,"nodeType":"357","endLine":154,"endColumn":43},{"ruleId":"324","severity":1,"message":"375","line":2,"column":29,"nodeType":"326","messageId":"327","endLine":2,"endColumn":33},{"ruleId":"328","severity":1,"message":"376","line":63,"column":8,"nodeType":"330","endLine":63,"endColumn":10,"suggestions":"377"},{"ruleId":"355","severity":1,"message":"356","line":71,"column":13,"nodeType":"357","endLine":71,"endColumn":3257},{"ruleId":"324","severity":1,"message":"325","line":73,"column":19,"nodeType":"326","messageId":"327","endLine":73,"endColumn":23},{"ruleId":"378","severity":1,"message":"379","line":180,"column":37,"nodeType":"380","messageId":"381","endLine":180,"endColumn":39},{"ruleId":"328","severity":1,"message":"382","line":202,"column":8,"nodeType":"330","endLine":202,"endColumn":10,"suggestions":"383"},{"ruleId":"328","severity":1,"message":"384","line":206,"column":8,"nodeType":"330","endLine":206,"endColumn":24,"suggestions":"385"},{"ruleId":"355","severity":1,"message":"356","line":221,"column":26,"nodeType":"357","endLine":221,"endColumn":83},{"ruleId":"324","severity":1,"message":"375","line":5,"column":74,"nodeType":"326","messageId":"327","endLine":5,"endColumn":78},{"ruleId":"328","severity":1,"message":"386","line":160,"column":8,"nodeType":"330","endLine":160,"endColumn":10,"suggestions":"387"},{"ruleId":"328","severity":1,"message":"388","line":167,"column":8,"nodeType":"330","endLine":167,"endColumn":26,"suggestions":"389"},{"ruleId":"328","severity":1,"message":"390","line":174,"column":8,"nodeType":"330","endLine":174,"endColumn":14,"suggestions":"391"},{"ruleId":"355","severity":1,"message":"356","line":236,"column":30,"nodeType":"357","endLine":236,"endColumn":120},{"ruleId":"324","severity":1,"message":"392","line":101,"column":23,"nodeType":"326","messageId":"327","endLine":101,"endColumn":38},{"ruleId":"328","severity":1,"message":"393","line":117,"column":8,"nodeType":"330","endLine":117,"endColumn":10,"suggestions":"394"},{"ruleId":"355","severity":1,"message":"356","line":162,"column":21,"nodeType":"357","endLine":162,"endColumn":44},{"ruleId":"324","severity":1,"message":"325","line":10,"column":12,"nodeType":"326","messageId":"327","endLine":10,"endColumn":16},{"ruleId":"324","severity":1,"message":"325","line":50,"column":15,"nodeType":"326","messageId":"327","endLine":50,"endColumn":19},{"ruleId":"328","severity":1,"message":"395","line":89,"column":4,"nodeType":"330","endLine":89,"endColumn":6,"suggestions":"396"},{"ruleId":"324","severity":1,"message":"361","line":1,"column":28,"nodeType":"326","messageId":"327","endLine":1,"endColumn":36},{"ruleId":"328","severity":1,"message":"366","line":26,"column":8,"nodeType":"330","endLine":26,"endColumn":22,"suggestions":"397"},{"ruleId":"324","severity":1,"message":"398","line":13,"column":11,"nodeType":"326","messageId":"327","endLine":13,"endColumn":18},{"ruleId":"328","severity":1,"message":"399","line":39,"column":8,"nodeType":"330","endLine":39,"endColumn":10,"suggestions":"400"},{"ruleId":"328","severity":1,"message":"401","line":92,"column":8,"nodeType":"330","endLine":92,"endColumn":10,"suggestions":"402"},{"ruleId":"328","severity":1,"message":"403","line":68,"column":8,"nodeType":"330","endLine":68,"endColumn":10,"suggestions":"404"},{"ruleId":"355","severity":1,"message":"356","line":76,"column":102,"nodeType":"357","endLine":76,"endColumn":127},{"ruleId":"328","severity":1,"message":"405","line":64,"column":8,"nodeType":"330","endLine":64,"endColumn":10,"suggestions":"406"},{"ruleId":"328","severity":1,"message":"407","line":69,"column":8,"nodeType":"330","endLine":69,"endColumn":10,"suggestions":"408"},{"ruleId":"328","severity":1,"message":"366","line":73,"column":8,"nodeType":"330","endLine":73,"endColumn":17,"suggestions":"409"},{"ruleId":"324","severity":1,"message":"410","line":53,"column":19,"nodeType":"326","messageId":"327","endLine":53,"endColumn":31},{"ruleId":"328","severity":1,"message":"411","line":100,"column":8,"nodeType":"330","endLine":100,"endColumn":10,"suggestions":"412"},{"ruleId":"355","severity":1,"message":"356","line":108,"column":102,"nodeType":"357","endLine":108,"endColumn":127},"no-native-reassign",["413"],"no-negated-in-lhs",["414"],"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'persistUser'. Either include it or remove the dependency array.","ArrayExpression",["415"],"'Search' is assigned a value but never used.","'res' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["416"],"'Modal' is defined but never used.","'Checkbox' is defined but never used.","'ExclamationCircleOutlined' is defined but never used.","React Hook useEffect has a missing dependency: 'verifyEmail'. Either include it or remove the dependency array.",["417"],["413"],["414"],"'confirmLoading' is assigned a value but never used.","'setConfirmLoading' is assigned a value but never used.","'Option' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchCategories' and 'fetchSubCategories'. Either include them or remove the dependency array.",["418"],"'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'setFilter' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchCategories'. Either include it or remove the dependency array.",["419"],"React Hook useEffect has missing dependencies: 'fetchProducts' and 'fetchProductsCountPagination'. Either include them or remove the dependency array.",["420"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Upload' is defined but never used.","React Hook useEffect has a missing dependency: 'loadBannerImages'. Either include it or remove the dependency array.",["421"],"'useState' is defined but never used.","'Image' is defined but never used.","'notification' is defined but never used.","React Hook useEffect has missing dependencies: 'categoryChangeHandler', 'form', and 'productDetails.category'. Either include them or remove the dependency array.",["422"],"React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.",["423"],["424"],"'Divider' is defined but never used.","'UserOutlined' is defined but never used.","'LockOutlined' is defined but never used.",["425"],"React Hook useEffect has missing dependencies: 'fetchCategories', 'fetchProductsBestSellers', and 'fetchProductsNewArrivals'. Either include them or remove the dependency array.",["426"],"'Rate' is defined but never used.","React Hook useEffect has a missing dependency: 'p'. Either include it or remove the dependency array.",["427"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'fetchProductDetails' and 'getUserWishlist'. Either include them or remove the dependency array.",["428"],"React Hook useEffect has a missing dependency: 'checkIfProductInCart'. Either include it or remove the dependency array.",["429"],"React Hook useEffect has missing dependencies: 'fetchCategories', 'fetchCurrProductsCount', and 'fetchSubCategories'. Either include them or remove the dependency array.",["430"],"React Hook useEffect has missing dependencies: 'fetchCurrProductsCount' and 'fetchFilteredProductsByLeftNav'. Either include them or remove the dependency array.",["431"],"React Hook useEffect has missing dependencies: 'fetchCurrProductsCount' and 'fetchFilteredProductsQuery'. Either include them or remove the dependency array.",["432"],"'updatedUserCart' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'checkIfOutOfStock'. Either include it or remove the dependency array.",["433"],"React Hook useEffect has a missing dependency: 'getCartFromDB'. Either include it or remove the dependency array.",["434"],["435"],"'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getStepValue'. Either include it or remove the dependency array.",["436"],"React Hook useEffect has a missing dependency: 'paymentIntent'. Either include it or remove the dependency array.",["437"],"React Hook useEffect has a missing dependency: 'getAllOrders'. Either include it or remove the dependency array.",["438"],"React Hook useEffect has a missing dependency: 'getUserWishlist'. Either include it or remove the dependency array.",["439"],"React Hook useEffect has a missing dependency: 'getUserProfileDetails'. Either include it or remove the dependency array.",["440"],["441"],"'updatedOrder' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getAllOrdersAdmin'. Either include it or remove the dependency array.",["442"],"no-global-assign","no-unsafe-negation",{"desc":"443","fix":"444"},{"desc":"445","fix":"446"},{"desc":"447","fix":"448"},{"desc":"449","fix":"450"},{"desc":"451","fix":"452"},{"desc":"453","fix":"454"},{"desc":"455","fix":"456"},{"desc":"457","fix":"458"},{"desc":"459","fix":"460"},{"desc":"461","fix":"462"},{"desc":"451","fix":"463"},{"desc":"464","fix":"465"},{"desc":"466","fix":"467"},{"desc":"468","fix":"469"},{"desc":"470","fix":"471"},{"desc":"472","fix":"473"},{"desc":"474","fix":"475"},{"desc":"476","fix":"477"},{"desc":"478","fix":"479"},{"desc":"480","fix":"481"},{"desc":"482","fix":"483"},{"desc":"484","fix":"485"},{"desc":"486","fix":"487"},{"desc":"488","fix":"489"},{"desc":"490","fix":"491"},{"desc":"492","fix":"493"},{"desc":"494","fix":"495"},{"desc":"496","fix":"497"},"Update the dependencies array to be: [persistUser]",{"range":"498","text":"499"},"Update the dependencies array to be: [history, user]",{"range":"500","text":"501"},"Update the dependencies array to be: [verifyEmail]",{"range":"502","text":"503"},"Update the dependencies array to be: [fetchCategories, fetchSubCategories]",{"range":"504","text":"505"},"Update the dependencies array to be: [fetchCategories]",{"range":"506","text":"507"},"Update the dependencies array to be: [fetchProducts, fetchProductsCountPagination, page]",{"range":"508","text":"509"},"Update the dependencies array to be: [loadBannerImages]",{"range":"510","text":"511"},"Update the dependencies array to be: [categoryChangeHandler, form, productDetails.category, productDetails.mode]",{"range":"512","text":"513"},"Update the dependencies array to be: [category.mode, form]",{"range":"514","text":"515"},"Update the dependencies array to be: [form, subCategory.mode]",{"range":"516","text":"517"},{"range":"518","text":"507"},"Update the dependencies array to be: [fetchCategories, fetchProductsBestSellers, fetchProductsNewArrivals]",{"range":"519","text":"520"},"Update the dependencies array to be: [p]",{"range":"521","text":"522"},"Update the dependencies array to be: [fetchProductDetails, getUserWishlist]",{"range":"523","text":"524"},"Update the dependencies array to be: [checkIfProductInCart, productDetails]",{"range":"525","text":"526"},"Update the dependencies array to be: [fetchCategories, fetchCurrProductsCount, fetchSubCategories]",{"range":"527","text":"528"},"Update the dependencies array to be: [page, filter, text, fetchFilteredProductsByLeftNav, fetchCurrProductsCount]",{"range":"529","text":"530"},"Update the dependencies array to be: [fetchCurrProductsCount, fetchFilteredProductsQuery, text]",{"range":"531","text":"532"},"Update the dependencies array to be: [checkIfOutOfStock]",{"range":"533","text":"534"},"Update the dependencies array to be: [getCartFromDB]",{"range":"535","text":"536"},"Update the dependencies array to be: [address.mode, form]",{"range":"537","text":"538"},"Update the dependencies array to be: [getStepValue]",{"range":"539","text":"540"},"Update the dependencies array to be: [paymentIntent]",{"range":"541","text":"542"},"Update the dependencies array to be: [getAllOrders]",{"range":"543","text":"544"},"Update the dependencies array to be: [getUserWishlist]",{"range":"545","text":"546"},"Update the dependencies array to be: [getUserProfileDetails]",{"range":"547","text":"548"},"Update the dependencies array to be: [form, loading]",{"range":"549","text":"550"},"Update the dependencies array to be: [getAllOrdersAdmin]",{"range":"551","text":"552"},[3159,3161],"[persistUser]",[3585,3591],"[history, user]",[2078,2080],"[verifyEmail]",[5141,5143],"[fetchCategories, fetchSubCategories]",[4036,4038],"[fetchCategories]",[4141,4147],"[fetchProducts, fetchProductsCountPagination, page]",[4256,4258],"[loadBannerImages]",[3166,3187],"[categoryChangeHandler, form, productDetails.category, productDetails.mode]",[720,735],"[category.mode, form]",[832,850],"[form, subCategory.mode]",[4527,4529],[3922,3924],"[fetchCategories, fetchProductsBestSellers, fetchProductsNewArrivals]",[2061,2063],"[p]",[7039,7041],"[fetchProductDetails, getUserWishlist]",[7110,7126],"[checkIfProductInCart, productDetails]",[6182,6184],"[fetchCategories, fetchCurrProductsCount, fetchSubCategories]",[6343,6361],"[page, filter, text, fetchFilteredProductsByLeftNav, fetchCurrProductsCount]",[6517,6523],"[fetchCurrProductsCount, fetchFilteredProductsQuery, text]",[4696,4698],"[checkIfOutOfStock]",[3018,3020],"[getCartFromDB]",[959,973],"[address.mode, form]",[1163,1165],"[getStepValue]",[3061,3063],"[paymentIntent]",[3835,3837],"[getAllOrders]",[2111,2113],"[getUserWishlist]",[2755,2757],"[getUserProfileDetails]",[2822,2831],"[form, loading]",[5072,5074],"[getAllOrdersAdmin]"]