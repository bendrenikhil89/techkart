[{"D:\\React\\techkart\\client\\src\\index.js":"1","D:\\React\\techkart\\client\\src\\reportWebVitals.js":"2","D:\\React\\techkart\\client\\src\\App.js":"3","D:\\React\\techkart\\client\\src\\components\\Navbar\\Navbar.js":"4","D:\\React\\techkart\\client\\src\\components\\Auth\\Login\\Login.js":"5","D:\\React\\techkart\\client\\src\\components\\Auth\\SignUp\\SignUp.js":"6","D:\\React\\techkart\\client\\src\\utils\\auth-util.js":"7","D:\\React\\techkart\\client\\src\\components\\Auth\\Confirmation\\Confirmation.js":"8","D:\\React\\techkart\\client\\src\\Reducers\\index.js":"9","D:\\React\\techkart\\client\\src\\Reducers\\userReducer.js":"10","D:\\React\\techkart\\client\\src\\components\\LoadingSpinner\\LoadingSpinner.js":"11","D:\\React\\techkart\\client\\src\\components\\AdminDashboard\\AdminLeftNav.js":"12","D:\\React\\techkart\\client\\src\\components\\Routes\\AdminRoute.js":"13","D:\\React\\techkart\\client\\src\\components\\Routes\\UserRoute.js":"14","D:\\React\\techkart\\client\\src\\pages\\ManageCategory.js":"15","D:\\React\\techkart\\client\\src\\pages\\ManageSubCategories.js":"16","D:\\React\\techkart\\client\\src\\pages\\ManageProducts.js":"17","D:\\React\\techkart\\client\\src\\pages\\ManageBannerImages.js":"18","D:\\React\\techkart\\client\\src\\utils\\categories-util.js":"19","D:\\React\\techkart\\client\\src\\utils\\subcategories-util.js":"20","D:\\React\\techkart\\client\\src\\components\\FileUpload\\FileUpload.js":"21","D:\\React\\techkart\\client\\src\\utils\\bannerImages-util.js":"22"},{"size":851,"mtime":1608921113696,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"24"},{"size":3419,"mtime":1609090458714,"results":"26","hashOfConfig":"24"},{"size":4374,"mtime":1609091133272,"results":"27","hashOfConfig":"24"},{"size":4270,"mtime":1608924962018,"results":"28","hashOfConfig":"24"},{"size":3253,"mtime":1608895977051,"results":"29","hashOfConfig":"24"},{"size":908,"mtime":1609049648146,"results":"30","hashOfConfig":"24"},{"size":2175,"mtime":1608906261599,"results":"31","hashOfConfig":"24"},{"size":183,"mtime":1608920381704,"results":"32","hashOfConfig":"24"},{"size":322,"mtime":1608920521970,"results":"33","hashOfConfig":"24"},{"size":210,"mtime":1608973359011,"results":"34","hashOfConfig":"24"},{"size":1302,"mtime":1609077673377,"results":"35","hashOfConfig":"24"},{"size":480,"mtime":1609066367328,"results":"36","hashOfConfig":"24"},{"size":484,"mtime":1609066371704,"results":"37","hashOfConfig":"24"},{"size":5872,"mtime":1609100758714,"results":"38","hashOfConfig":"24"},{"size":8525,"mtime":1609100800236,"results":"39","hashOfConfig":"24"},{"size":530,"mtime":1609078345526,"results":"40","hashOfConfig":"24"},{"size":6405,"mtime":1609180652902,"results":"41","hashOfConfig":"24"},{"size":1008,"mtime":1609091945720,"results":"42","hashOfConfig":"24"},{"size":1062,"mtime":1609098682238,"results":"43","hashOfConfig":"24"},{"size":6879,"mtime":1609163450526,"results":"44","hashOfConfig":"24"},{"size":852,"mtime":1609177486185,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1c1ievv",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\React\\techkart\\client\\src\\index.js",[],["99","100"],"D:\\React\\techkart\\client\\src\\reportWebVitals.js",[],"D:\\React\\techkart\\client\\src\\App.js",["101","102","103"],"import React, {useEffect, useState} from 'react';\nimport Navbar from './components/Navbar/Navbar';\nimport { Route, Switch, useHistory} from 'react-router-dom';\nimport Login from './components/Auth/Login/Login';\nimport SignUp from './components/Auth/SignUp/SignUp';\nimport Confirmation from './components/Auth/Confirmation/Confirmation';\nimport {validatetoken} from './utils/auth-util';\nimport {useDispatch, useSelector} from 'react-redux';\nimport { notification } from 'antd';\nimport LoadingSpinner from './components/LoadingSpinner/LoadingSpinner';\nimport AdminRoute from './components/Routes/AdminRoute';\nimport UserRoute from './components/Routes/UserRoute';\nimport ManageCategory from './pages/ManageCategory';\nimport ManageSubCategories from './pages/ManageSubCategories';\nimport ManageProducts from './pages/ManageProducts';\nimport ManageBannerImages from './pages/ManageBannerImages';\n\nconst App = () => {\n  const [loading, setLoading] = useState(true);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const {user} = useSelector(state => ({...state}));\n  const openNotificationWithIcon = (type, msgTitle, msgBody)  => {\n    notification[type]({\n      message: msgTitle,\n      description: msgBody\n    });\n  };\n  \n  const persistUser = async() => {\n    const user = JSON.parse(localStorage.getItem(\"techkart-user\"));\n    if(user){\n      const {name, email, authtoken, _id, role} = user;\n      let res;\n      try{\n        res = await validatetoken(authtoken);\n        let objExpiresAt = JSON.parse('{\"date_created\": \"'+res.data.exp+'\"}');\n        const expiresAt = new Date(1000*objExpiresAt.date_created);\n        const currDate = new Date();\n\n        if(expiresAt > currDate){\n          localStorage.setItem(\"techkart-user\", JSON.stringify({name, email, authtoken, role, _id, expiresAt: res.data.exp}))\n          dispatch({\n            type: 'PERSIST_LOGIN',\n            payload: {\n              name,\n              email,\n              authtoken,\n              role,\n              _id,\n              expiresAt: res.data.exp\n            }\n          });\n        }\n        else{\n          localStorage.removeItem(\"techkart-user\");\n          dispatch({\n            type: 'LOG_OUT',\n            payload: null\n          });\n          history.push(\"/login\");\n        }\n        setLoading(false);\n      }\n      catch(err){\n        setLoading(false);\n        localStorage.removeItem(\"techkart-user\");\n        openNotificationWithIcon('error',err.response.statusText, \"Your authorization token has expired. Please login again!\");\n        history.push(\"/login\");\n      }\n    }\n    else{\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    persistUser();\n  }, []);\n\n  return (\n    (!loading ? <>\n      <Navbar />\n        <Switch>\n          <Route path=\"/login\" exact component={Login} />\n          <Route path=\"/signup\" exact component={SignUp} />\n          <Route path=\"/confirmation/:email/:token\" exact component={Confirmation} />\n          <AdminRoute path=\"/dashboard/admin/categories\" exact component={ManageCategory} />\n          <AdminRoute path=\"/dashboard/admin/subcategories\" exact component={ManageSubCategories} />\n          <AdminRoute path=\"/dashboard/admin/products\" exact component={ManageProducts} />\n          <AdminRoute path=\"/dashboard/admin/bannerimages\" exact component={ManageBannerImages} />\n        </Switch> \n    </> : <LoadingSpinner />)\n  );\n}\n\nexport default App;\n","D:\\React\\techkart\\client\\src\\components\\Navbar\\Navbar.js",["104","105"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {useSelector} from 'react-redux';\r\nimport { Popover, Button, Divider, Input, Badge } from 'antd';\r\nimport { UserOutlined, ShoppingCartOutlined, HeartOutlined, FundOutlined, SearchOutlined, LogoutOutlined, DashboardOutlined } from '@ant-design/icons';\r\n\r\nimport './Navbar.css';\r\n\r\nconst Navbar = () => {\r\n    const { Search } = Input;\r\n    const onSearch = value => console.log(value);\r\n    const {user} = useSelector(state => ({...state}));\r\n    \r\n    const loginContent = (\r\n        <div className=\"navbar__signup-container\">\r\n          <div className=\"navbar__signup\">\r\n              <strong>New customer?</strong>\r\n              <Link to=\"/signup\">Sign Up</Link>\r\n          </div>\r\n          <Divider /> \r\n          <Button type=\"text\" icon={<UserOutlined />}>My Profile</Button>\r\n          <Divider />\r\n          <Button type=\"text\" icon={<FundOutlined />}>Orders</Button>\r\n        </div>\r\n    );\r\n    \r\n    let loggedInContent;\r\n    if(user !== null){\r\n        let adminLink = null;\r\n        if(user.role === 'admin') adminLink = (<><Button type=\"text\" icon={<DashboardOutlined />}><Link to=\"/dashboard/admin/categories\"><label style={{fontSize:'0.84rem', marginLeft:'8px', color:'#282c3f', cursor:'pointer'}}>Admin Dashboard</label></Link></Button>\r\n        <Divider /></>);\r\n        loggedInContent = (\r\n            <div className=\"navbar__signup-container\">\r\n                <label className=\"navbar__username\">Hello {user.name.split(' ')[0]}</label>\r\n                <Divider /> \r\n                {adminLink}\r\n                <Button type=\"text\" icon={<UserOutlined />}>My Profile</Button>\r\n                <Divider />\r\n                <Button type=\"text\" icon={<FundOutlined />}>Orders</Button>\r\n                <Divider />\r\n                <Button type=\"text\" icon={<LogoutOutlined />}>Logout</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const profileDiv = (\r\n        <div className=\"navbar__menu\">\r\n            <div className=\"navbar__menu__icon-wrapper\"><UserOutlined className=\"navbar__menu__icon\"/></div>\r\n            <div className=\"navbar__menu_text\"><label>Profile</label></div>\r\n        </div>\r\n    );\r\n\r\n    \r\n\r\n    return (\r\n        <div className=\"navbar__container\">\r\n            <nav className=\"navbar__nav\">\r\n                <div className=\"navbar__brand-wrapper\">\r\n                    <Link to=\"/\" className=\"navbar__brand\">TechKart\r\n                        <Input placeholder=\"Search for products, brands and more\" suffix={<SearchOutlined />} className=\"navbar__search\" />\r\n                    </Link>\r\n                </div>\r\n                <div className=\"navbar__links-wrapper\">\r\n                    <ul className=\"navbar__links\">\r\n                        <li>\r\n                            {user === null ? <Popover content={loginContent} placement=\"bottom\">\r\n                                <Button type=\"secondary\" shape=\"square\" size=\"Medium\">\r\n                                    <Link to=\"/login\">Login</Link>\r\n                                </Button>\r\n                                </Popover> : <Popover content={loggedInContent} placement=\"bottom\">\r\n                                    {profileDiv}\r\n                                </Popover>}\r\n                        </li>\r\n                        <li>\r\n                            <div className=\"navbar__menu\">\r\n                                <div className=\"navbar__menu__icon-wrapper\"><HeartOutlined className=\"navbar__menu__icon\" /></div>\r\n                                <div className=\"navbar__menu_text\"><label>Wishlist</label></div>\r\n                            </div>\r\n                        </li>\r\n                        <li>\r\n                            <Badge count={0} size=\"small\">\r\n                                <div className=\"navbar__menu\">\r\n                                    <div className=\"navbar__menu__icon-wrapper\"><ShoppingCartOutlined className=\"navbar__menu__icon\" style={{fontSize: '1.2rem'}}/></div>\r\n                                    <div style={{paddingTop: '3px'}} className=\"navbar__menu_text\"><label>Cart</label></div>\r\n                                </div>\r\n                            </Badge>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;\r\n","D:\\React\\techkart\\client\\src\\components\\Auth\\Login\\Login.js",["106","107","108"],"import React, {useState, useEffect} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Divider, notification, Modal } from 'antd';\r\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\r\nimport {login, resendlink} from '../../../utils/auth-util';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\n\r\nimport '../../Auth/Auth.css';\r\nconst { confirm } = Modal;\r\n\r\nconst Login = ({history}) => {\r\n    const dispatch = useDispatch();\r\n    const {user} = useSelector(state => ({...state}));\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    \r\n    const openNotificationWithIcon = (type, msgTitle, msgBody)  => {\r\n        notification[type]({\r\n          message: msgTitle,\r\n          description: msgBody\r\n        });\r\n    };\r\n\r\n    const showConfirm = (content) => {\r\n        confirm({\r\n          title: 'Email verification failed',\r\n          icon: <ExclamationCircleOutlined />,\r\n          content: content,\r\n          centered: true,\r\n          async onOk() {\r\n            let res;\r\n            try{\r\n                res = await resendlink(email);\r\n                openNotificationWithIcon('success','Email verification link resent', 'Email verification link has been sent to your email.');\r\n                history.push(\"/login\");\r\n            }\r\n            catch(err){\r\n                setLoading(false);\r\n                openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n            }\r\n          },\r\n          onCancel() {\r\n            console.log('Cancel');\r\n          },\r\n        });\r\n      }\r\n    \r\n    const loginHandler = async(e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        let res;\r\n        try{\r\n            res = await login(email, password);\r\n            // openNotificationWithIcon('success',res.data.name, res.data.token);\r\n            localStorage.setItem(\"techkart-user\", JSON.stringify({name: res.data.name, email: res.data.email, authtoken: res.data.token, role: res.data.role, _id: res.data.userId}))\r\n            dispatch({\r\n                type: 'LOGGED_IN',\r\n                payload: {\r\n                  name: res.data.name,\r\n                  email: res.data.email,\r\n                  authtoken: res.data.token,\r\n                  role: res.data.role,\r\n                  _id: res.data.userId\r\n                }\r\n            });\r\n            history.push(\"/\");\r\n        }\r\n        catch(err){\r\n            setLoading(false);\r\n            if(err.response.data.msg === \"Your Email has not been verified.\"){\r\n                showConfirm(`${err.response.data.msg} Do you want to resend email verification link?`);\r\n            }\r\n            else{\r\n                openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(user && user.token){\r\n            history.push(\"/\");\r\n        }\r\n    }, [user])\r\n    return (\r\n        <div className=\"login-signup__container\">\r\n            <form onSubmit={loginHandler}>\r\n                <h1>Sign In</h1>\r\n                <div className=\"login-signup__form-group\">\r\n                    <input type=\"text\" required=\"required\" value={email} onChange={(e) => setEmail(e.target.value)} />\r\n                    <label htmlFor=\"input\" className=\"login-signup__control-label\">Your email</label><i className=\"login-signup__bar\"></i>\r\n                </div>\r\n                <div className=\"login-signup__form-group\">\r\n                    <input type=\"password\" required=\"required\" value={password} onChange={(e) => setPassword(e.target.value)} />\r\n                    <label htmlFor=\"input\" className=\"login-signup__control-label\">Your password</label><i className=\"login-signup__bar\"></i>\r\n                </div>\r\n                <p className=\"login__forgot-password\"><Link to=\"/forgot/password\">Forgot Password?</Link></p>\r\n                <button type=\"submit\" className=\"login-signup__button\" >Sign In</button>\r\n                <Divider />\r\n                <p className=\"login-signup__not-already-member\">Not a member? <Link to=\"/signup\">Sign Up</Link></p>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","D:\\React\\techkart\\client\\src\\components\\Auth\\SignUp\\SignUp.js",["109"],"import React, {useState} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Divider, notification } from 'antd';\r\nimport {signUp} from '../../../utils/auth-util';\r\n\r\nconst SignUp = ({history}) => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    \r\n    const openNotificationWithIcon = (type, msgTitle, msgBody)  => {\r\n        notification[type]({\r\n          message: msgTitle,\r\n          description: msgBody\r\n        });\r\n    };\r\n    \r\n    const signUpHandler = async(e) => {\r\n        e.preventDefault();\r\n        if(password !== confirmPassword){\r\n            openNotificationWithIcon('error',\"Password mismatch\", \"Password and confirm password do not match.\");\r\n            setLoading(false);\r\n            return;\r\n        }\r\n        setLoading(true);\r\n        let res;\r\n        try{\r\n            res = await signUp(name, email, password);\r\n            openNotificationWithIcon('success',res.data.statusText, res.data);\r\n            history.push(\"/login\");\r\n        }\r\n        catch(err){\r\n            setLoading(false);\r\n            openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"login-signup__container signup__container\">\r\n            <form onSubmit={signUpHandler}>\r\n                <h1>Sign Up</h1>\r\n                <div className=\"login-signup__form-group\">\r\n                    <input type=\"text\" required=\"required\" value={name} onChange={(e) => setName(e.target.value)}/>\r\n                    <label htmlFor=\"input\" className=\"login-signup__control-label\">Your name</label><i className=\"login-signup__bar\"></i>\r\n                </div>\r\n                <div className=\"login-signup__form-group\">\r\n                    <input type=\"text\" required=\"required\" value={email} onChange={(e) => setEmail(e.target.value)} />\r\n                    <label htmlFor=\"input\" className=\"login-signup__control-label\">Your email</label><i className=\"login-signup__bar\"></i>\r\n                </div>\r\n                <div className=\"login-signup__form-group\">\r\n                    <input type=\"password\" required=\"required\" value={password} onChange={(e) => setPassword(e.target.value)} />\r\n                    <label htmlFor=\"input\" className=\"login-signup__control-label\">Your password</label><i className=\"login-signup__bar\"></i>\r\n                </div>\r\n                <div className=\"login-signup__form-group\">\r\n                    <input type=\"password\" required=\"required\" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)}/>\r\n                    <label htmlFor=\"input\" className=\"login-signup__control-label\">Confirm password</label><i className=\"login-signup__bar\"></i>\r\n                </div>\r\n                <button type=\"submit\" className=\"login-signup__button\">Sign Up</button>\r\n                <Divider />\r\n                <p className=\"login-signup__not-already-member\">Already a member? <Link to=\"/login\">Sign In</Link></p>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUp;","D:\\React\\techkart\\client\\src\\utils\\auth-util.js",[],"D:\\React\\techkart\\client\\src\\components\\Auth\\Confirmation\\Confirmation.js",["110","111","112","113"],"import React, {useEffect, useState} from 'react';\r\nimport {confirmation, resendlink} from '../../../utils/auth-util';\r\nimport { notification, Modal } from 'antd';\r\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\r\n\r\nconst { confirm } = Modal;\r\n\r\nconst Confirmation = ({history, match}) => {\r\n    const openNotificationWithIcon = (type, msgTitle, msgBody)  => {\r\n        notification[type]({\r\n          message: msgTitle,\r\n          description: msgBody\r\n        });\r\n    };\r\n\r\n    const verifyEmail = async() => {\r\n        let res;\r\n        try{\r\n            res = await confirmation(match.params.email, match.params.token);\r\n            openNotificationWithIcon('success', 'Email verification successful', 'Your email address has been verified succesfully.');\r\n            history.push(\"/\");\r\n        }\r\n        catch(err){\r\n            if(err.response.status === 400){\r\n                showConfirm(`${err.response.data.msg} Do you want to resend email verification link?`);\r\n            }\r\n            else{\r\n                openNotificationWithIcon('error', 'Email verification failed', err.response.data.msg);\r\n                history.push(\"/login\");\r\n            }\r\n        }\r\n    }\r\n\r\n    const showConfirm = (content) => {\r\n        confirm({\r\n          title: 'Email verification failed',\r\n          icon: <ExclamationCircleOutlined />,\r\n          content: content,\r\n          centered: true,\r\n          async onOk() {\r\n            let res;\r\n            try{\r\n                res = await resendlink(match.params.email);\r\n                openNotificationWithIcon('success','Email verification link resent', 'Email verification link has been sent to your email.');\r\n                history.push(\"/login\");\r\n            }\r\n            catch(err){\r\n                openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n                history.push('/login');\r\n            }\r\n          },\r\n          onCancel() {\r\n            history.push('/login');\r\n          },\r\n        });\r\n      }\r\n\r\n    useEffect(() => {\r\n        verifyEmail();\r\n    }, []);\r\n    return (\r\n        <>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Confirmation;\r\n","D:\\React\\techkart\\client\\src\\Reducers\\index.js",[],"D:\\React\\techkart\\client\\src\\Reducers\\userReducer.js",[],"D:\\React\\techkart\\client\\src\\components\\LoadingSpinner\\LoadingSpinner.js",[],"D:\\React\\techkart\\client\\src\\components\\AdminDashboard\\AdminLeftNav.js",[],"D:\\React\\techkart\\client\\src\\components\\Routes\\AdminRoute.js",[],"D:\\React\\techkart\\client\\src\\components\\Routes\\UserRoute.js",[],"D:\\React\\techkart\\client\\src\\pages\\ManageCategory.js",["114"],"import React, {useEffect, useState} from 'react';\r\nimport {Input, Button, List, Card, Divider, notification, Popconfirm, Modal} from 'antd';\r\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons';\r\nimport AdminLeftNav from '../components/AdminDashboard/AdminLeftNav';\r\nimport {create, fetchAll, update, remove} from '../utils/categories-util';\r\nimport {useSelector} from 'react-redux';\r\n\r\nconst ManageCategory = () => {\r\n    const [category, setCategory] = useState('');\r\n    const [updateCategory, setUpdateCategory] = useState({});\r\n    const [categories, setCategories] = useState([]);\r\n    const {user} = useSelector(state => ({...state}));\r\n    const [visible, setVisible] = useState(false);\r\n    const [confirmLoading, setConfirmLoading] = useState(false);\r\n\r\n    const {email, authtoken} = user;\r\n    const openNotificationWithIcon = (type, msgTitle, msgBody)  => {\r\n        notification[type]({\r\n          message: msgTitle,\r\n          description: msgBody\r\n        });\r\n    };\r\n\r\n    const createCategoryHandler = async(e) => {\r\n        e.preventDefault();\r\n        if(category.length < 2) return openNotificationWithIcon('error','Category Length Error', 'Please ensure that the category name has at least 2 characters');\r\n        try{\r\n            const newCategory = await create(category, email, authtoken);\r\n            fetchCategories();\r\n            setCategory('');\r\n            openNotificationWithIcon('success','Category Created', `${newCategory.data.category} created successfully!`)\r\n        }\r\n        catch(err){\r\n            openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n        }\r\n    }\r\n\r\n    const updateCategoryHandler = async(e) => {\r\n        e.preventDefault();\r\n        if(updateCategory.length < 2) return openNotificationWithIcon('error','Category Length Error', 'Please ensure that the category name has at least 2 characters');\r\n        setConfirmLoading(true);\r\n        try{\r\n            const category = await update(updateCategory.name, email, authtoken, updateCategory.slug);\r\n            fetchCategories();\r\n            setUpdateCategory({});\r\n            openNotificationWithIcon('success','Category Updated', `${category.data.category} updated successfully!`)\r\n        }\r\n        catch(err){\r\n            openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n        }\r\n        setVisible(false);\r\n        setConfirmLoading(false);\r\n    }\r\n\r\n    const fetchCategories = async() => {\r\n        try{\r\n            const categories = await fetchAll();\r\n            console.log(categories.data);\r\n            setCategories(categories.data);\r\n        }\r\n        catch(err){\r\n            openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n        }\r\n    }\r\n\r\n    const removeCategoryHandler = async(slug) => {\r\n        try{\r\n            const category = await remove(authtoken, slug, email);\r\n            openNotificationWithIcon('success','Category Deleted', `${category.data.msg}!`)\r\n            fetchCategories();\r\n        }\r\n        catch(err){\r\n            openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n        }\r\n    }\r\n\r\n    const showModal = ({slug, name}) => {\r\n        setVisible(true);\r\n        setUpdateCategory({...updateCategory, slug, name});\r\n    };\r\n    \r\n    const handleCancel = () => {\r\n        setVisible(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchCategories();\r\n    }, [])\r\n    return (\r\n        <>\r\n        <div className=\"admin__wrapper\">\r\n            <div className=\"admin__leftnav\">\r\n                <AdminLeftNav />\r\n            </div>\r\n            <div className=\"admin__content\">\r\n                <Input placeholder=\"Category name\" allowClear value={category} onChange={e => setCategory(e.target.value)}/>\r\n                    <Button type=\"primary\" size=\"medium\" style={{marginTop: '20px'}} onClick={e => createCategoryHandler(e)}>Create</Button>\r\n                    <Divider />\r\n                    <List\r\n                        grid={{\r\n                        gutter: 16,\r\n                        xs: 1,\r\n                        sm: 2,\r\n                        md: 2,\r\n                        lg: 4,\r\n                        xl: 4,\r\n                        xxl: 4,\r\n                        }}\r\n                        dataSource={categories}\r\n                        renderItem={item => (\r\n                        <List.Item>\r\n                            <Card actions={[\r\n                                <EditOutlined key=\"edit\" onClick={() => showModal({slug: item.slug, name:item.name})} />,\r\n                                <Popconfirm\r\n                                    title=\"Are you sure to delete this category?\"\r\n                                    onConfirm={() => removeCategoryHandler(item.slug)}\r\n                                    okText=\"Yes\"\r\n                                    cancelText=\"No\"\r\n                                >\r\n                                    <DeleteOutlined key=\"ellipsis\" />\r\n                                </Popconfirm>,\r\n                            ]}>{item.name}</Card>\r\n                        </List.Item>\r\n                        )}\r\n                    />\r\n            </div>\r\n        </div>\r\n        <Modal\r\n            title=\"Update Category\"\r\n            visible={visible}\r\n            confirmLoading={confirmLoading}\r\n            onCancel={handleCancel}\r\n            centered\r\n            footer={null}\r\n        >\r\n            <Input placeholder=\"Category name\" allowClear value={updateCategory.name} onChange={e => setUpdateCategory({...updateCategory, name: e.target.value})}/>\r\n            <Button type=\"primary\" size=\"medium\" style={{marginTop: '20px'}} onClick={e => updateCategoryHandler(e)}>Update</Button>\r\n        </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ManageCategory;","D:\\React\\techkart\\client\\src\\pages\\ManageSubCategories.js",["115"],"import React, {useState,useEffect} from 'react';\r\nimport AdminLeftNav from '../components/AdminDashboard/AdminLeftNav';\r\nimport '../components/AdminDashboard/AdminDashboard.css';\r\nimport {Input, Button, List, Card, Divider, notification, Popconfirm, Modal, Select, Empty} from 'antd';\r\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons';\r\nimport {fetchAll} from '../utils/categories-util';\r\nimport {fetchAllSubCategories, createSubCategory, removeSubCategory, updatesubCategory} from '../utils/subcategories-util';\r\nimport {useSelector} from 'react-redux';\r\n\r\nconst ManageSubCategories = () => {\r\n    const [subCategory, setSubCategory] = useState('');\r\n    const [subCategories, setSubCategories] = useState([]);\r\n    const [updateSubCategory, setUpdateSubCategory] = useState({});\r\n\r\n    const [category, setCategory] = useState(null);\r\n    const [categories, setCategories] = useState([]);\r\n    const [updateCategory, setUpdateCategory] = useState(null);\r\n\r\n    const {user} = useSelector(state => ({...state}));\r\n    const [visible, setVisible] = useState(false);\r\n    const [confirmLoading, setConfirmLoading] = useState(false);\r\n\r\n    const { Option } = Select;\r\n    const {email, authtoken} = user;\r\n    \r\n    const openNotificationWithIcon = (type, msgTitle, msgBody)  => {\r\n        notification[type]({\r\n          message: msgTitle,\r\n          description: msgBody\r\n        });\r\n    };\r\n\r\n    const createSubCategoryHandler = async(e) => {\r\n        e.preventDefault();\r\n        if(subCategory.length < 2) return openNotificationWithIcon('error','Sub Category Length Error', 'Please ensure that the sub category name has at least 2 characters');\r\n        try{\r\n            const newSubCategory = await createSubCategory({name: subCategory,parent: category}, email, authtoken);\r\n            fetchSubCategories();\r\n            setCategory(null);\r\n            setSubCategory('');\r\n            openNotificationWithIcon('success','Sub Category Created', `${newSubCategory.data.subCategory} created successfully!`)\r\n        }\r\n        catch(err){\r\n            openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n        }\r\n    }\r\n\r\n    const updateSubCategoryHandler = async(e) => {\r\n        e.preventDefault();\r\n        if(updateSubCategory.name.length < 2) return openNotificationWithIcon('error','Sub Category Length Error', 'Please ensure that the sub category name has at least 2 characters');\r\n        setConfirmLoading(true);\r\n        try{\r\n            const subCategory = await updatesubCategory({name: updateSubCategory.name, parent: updateCategory}, email, authtoken, updateSubCategory.slug);\r\n            fetchSubCategories();\r\n            setUpdateCategory('');\r\n            setUpdateSubCategory({});\r\n            openNotificationWithIcon('success','Sub Category Updated', `${subCategory.data.subCategory} updated successfully!`)\r\n        }\r\n        catch(err){\r\n            openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n        }\r\n        setVisible(false);\r\n        setConfirmLoading(false);\r\n    }\r\n\r\n    const fetchCategories = async() => {\r\n        try{\r\n            const categories = await fetchAll();\r\n            setCategories(categories.data);\r\n        }\r\n        catch(err){\r\n            openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n        }\r\n    }\r\n\r\n    const fetchSubCategories = async() => {\r\n        try{\r\n            const subCategories = await fetchAllSubCategories();\r\n            setSubCategories(subCategories.data);\r\n        }\r\n        catch(err){\r\n            openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n        }\r\n    }\r\n\r\n    const removeSubCategoryHandler = async(slug) => {\r\n        try{\r\n            const subCategory = await removeSubCategory(authtoken, slug, email);\r\n            openNotificationWithIcon('success','Sub Category Deleted', `${subCategory.data.msg}!`)\r\n            fetchSubCategories();\r\n        }\r\n        catch(err){\r\n            openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n        }\r\n    }\r\n\r\n    const showModal = ({slug, name, parent}) => {\r\n        setVisible(true);\r\n        setUpdateSubCategory({...updateSubCategory, slug, name});\r\n        setUpdateCategory(parent);\r\n    };\r\n\r\n    function onChange(value) {\r\n        setCategory(value);\r\n    }\r\n\r\n    function onChangeUpdate(value) {\r\n        setUpdateCategory(value);\r\n    }\r\n    \r\n    const handleCancel = () => {\r\n        setVisible(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchCategories();\r\n        fetchSubCategories();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n        <div className=\"admin__wrapper\">\r\n            <div className=\"admin__leftnav\">\r\n                <AdminLeftNav />\r\n            </div>\r\n            <div className=\"admin__content\">\r\n                <Select\r\n                    style={{ width: '100%' }}\r\n                    onChange={onChange}\r\n                    value={category}\r\n                    placeholder=\"Select a category\"\r\n                    allowClear\r\n                >\r\n                    {categories.length > 0 &&\r\n                    categories.map((c) => (\r\n                        <Option key={c._id} value={c._id}>\r\n                        {c.name}\r\n                        </Option>\r\n                    ))}\r\n                </Select>\r\n                <Input placeholder=\"Sub category name\" style={{ marginTop: '20px' }} allowClear value={subCategory} onChange={e => setSubCategory(e.target.value)}/>\r\n                <Button type=\"primary\" size=\"medium\" style={{marginTop: '20px'}} onClick={e => createSubCategoryHandler(e)}>Create</Button>\r\n                <Divider />\r\n                {subCategories.length > 0 \r\n                ? <List\r\n                    grid={{\r\n                    gutter: 16,\r\n                    xs: 1,\r\n                    sm: 2,\r\n                    md: 2,\r\n                    lg: 4,\r\n                    xl: 4,\r\n                    xxl: 4,\r\n                    }}\r\n                    dataSource={subCategories}\r\n                    renderItem={item => (\r\n                    <List.Item>\r\n                        <Card actions={[\r\n                            <EditOutlined key=\"edit\" onClick={() => showModal({slug: item.slug, name:item.name, parent: item.parent})} />,\r\n                            <Popconfirm\r\n                                title=\"Are you sure to delete this sub category?\"\r\n                                onConfirm={() => removeSubCategoryHandler(item.slug)}\r\n                                okText=\"Yes\"\r\n                                cancelText=\"No\"\r\n                            >\r\n                                <DeleteOutlined key=\"ellipsis\" />\r\n                            </Popconfirm>,\r\n                        ]}>{item.name}</Card>\r\n                    </List.Item>\r\n                    )}\r\n                /> \r\n                : <Empty\r\n                    image=\"https://gw.alipayobjects.com/zos/antfincdn/ZHrcdLPrvN/empty.svg\"\r\n                    imageStyle={{\r\n                    height: 60,\r\n                    }}\r\n                    description={\r\n                    <span>\r\n                        No sub categories found!\r\n                    </span>\r\n                    }\r\n                />}\r\n            </div>\r\n        </div>\r\n        <Modal\r\n            title=\"Update Sub Category\"\r\n            visible={visible}\r\n            confirmLoading={confirmLoading}\r\n            onCancel={handleCancel}\r\n            centered\r\n            footer={null}\r\n        >\r\n            <Select\r\n                style={{ width: '100%' }}\r\n                placeholder=\"Select a category\"\r\n                onChange={onChangeUpdate}\r\n                value={updateCategory}\r\n                allowClear\r\n            >\r\n                {categories.length > 0 &&\r\n                categories.map((c) => (\r\n                    <Option key={c._id} value={c._id}>\r\n                        {c.name}\r\n                    </Option>\r\n                ))}\r\n            </Select>\r\n            <Input placeholder=\"Sub Category name\" style={{marginTop: '20px'}} allowClear value={updateSubCategory.name} onChange={e => setUpdateSubCategory({...updateSubCategory, name: e.target.value})}/>\r\n            <Button type=\"primary\" size=\"medium\" style={{marginTop: '20px'}} onClick={e => updateSubCategoryHandler(e)}>Update</Button>\r\n        </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ManageSubCategories;","D:\\React\\techkart\\client\\src\\pages\\ManageProducts.js",["116"],"import React from 'react';\r\nimport AdminLeftNav from '../components/AdminDashboard/AdminLeftNav';\r\nimport '../components/AdminDashboard/AdminDashboard.css';\r\nimport { Divider } from 'antd';\r\n\r\nconst ManageProducts = () => {\r\n    return (\r\n        <div className=\"admin__wrapper\">\r\n            <div className=\"admin__leftnav\">\r\n                <AdminLeftNav />\r\n            </div>\r\n            <div className=\"admin__content\">\r\n                content\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ManageProducts;","D:\\React\\techkart\\client\\src\\pages\\ManageBannerImages.js",["117","118","119"],"D:\\React\\techkart\\client\\src\\utils\\categories-util.js",[],"D:\\React\\techkart\\client\\src\\utils\\subcategories-util.js",[],"D:\\React\\techkart\\client\\src\\components\\FileUpload\\FileUpload.js",["120","121","122","123"],"D:\\React\\techkart\\client\\src\\utils\\bannerImages-util.js",[],{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":12,"column":8,"nodeType":"130","messageId":"131","endLine":12,"endColumn":17},{"ruleId":"128","severity":1,"message":"132","line":22,"column":10,"nodeType":"130","messageId":"131","endLine":22,"endColumn":14},{"ruleId":"133","severity":1,"message":"134","line":79,"column":6,"nodeType":"135","endLine":79,"endColumn":8,"suggestions":"136"},{"ruleId":"128","severity":1,"message":"137","line":10,"column":13,"nodeType":"130","messageId":"131","endLine":10,"endColumn":19},{"ruleId":"128","severity":1,"message":"138","line":11,"column":11,"nodeType":"130","messageId":"131","endLine":11,"endColumn":19},{"ruleId":"128","severity":1,"message":"139","line":16,"column":12,"nodeType":"130","messageId":"131","endLine":16,"endColumn":19},{"ruleId":"128","severity":1,"message":"140","line":34,"column":17,"nodeType":"130","messageId":"131","endLine":34,"endColumn":20},{"ruleId":"133","severity":1,"message":"141","line":84,"column":8,"nodeType":"135","endLine":84,"endColumn":14,"suggestions":"142"},{"ruleId":"128","severity":1,"message":"139","line":11,"column":12,"nodeType":"130","messageId":"131","endLine":11,"endColumn":19},{"ruleId":"128","severity":1,"message":"143","line":1,"column":27,"nodeType":"130","messageId":"131","endLine":1,"endColumn":35},{"ruleId":"128","severity":1,"message":"140","line":19,"column":13,"nodeType":"130","messageId":"131","endLine":19,"endColumn":16},{"ruleId":"128","severity":1,"message":"140","line":43,"column":17,"nodeType":"130","messageId":"131","endLine":43,"endColumn":20},{"ruleId":"133","severity":1,"message":"144","line":60,"column":8,"nodeType":"135","endLine":60,"endColumn":10,"suggestions":"145"},{"ruleId":"133","severity":1,"message":"146","line":88,"column":8,"nodeType":"135","endLine":88,"endColumn":10,"suggestions":"147"},{"ruleId":"133","severity":1,"message":"148","line":118,"column":8,"nodeType":"135","endLine":118,"endColumn":10,"suggestions":"149"},{"ruleId":"128","severity":1,"message":"150","line":4,"column":10,"nodeType":"130","messageId":"131","endLine":4,"endColumn":17},{"ruleId":"128","severity":1,"message":"151","line":5,"column":22,"nodeType":"130","messageId":"131","endLine":5,"endColumn":28},{"ruleId":"128","severity":1,"message":"152","line":16,"column":13,"nodeType":"130","messageId":"131","endLine":16,"endColumn":20},{"ruleId":"133","severity":1,"message":"153","line":99,"column":8,"nodeType":"135","endLine":99,"endColumn":10,"suggestions":"154"},{"ruleId":"128","severity":1,"message":"151","line":5,"column":18,"nodeType":"130","messageId":"131","endLine":5,"endColumn":24},{"ruleId":"128","severity":1,"message":"155","line":5,"column":33,"nodeType":"130","messageId":"131","endLine":5,"endColumn":38},{"ruleId":"128","severity":1,"message":"156","line":6,"column":10,"nodeType":"130","messageId":"131","endLine":6,"endColumn":24},{"ruleId":"128","severity":1,"message":"139","line":11,"column":10,"nodeType":"130","messageId":"131","endLine":11,"endColumn":17},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],"no-unused-vars","'UserRoute' is defined but never used.","Identifier","unusedVar","'user' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'persistUser'. Either include it or remove the dependency array.","ArrayExpression",["159"],"'Search' is assigned a value but never used.","'onSearch' is assigned a value but never used.","'loading' is assigned a value but never used.","'res' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["160"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'verifyEmail'. Either include it or remove the dependency array.",["161"],"React Hook useEffect has a missing dependency: 'fetchCategories'. Either include it or remove the dependency array.",["162"],"React Hook useEffect has missing dependencies: 'fetchCategories' and 'fetchSubCategories'. Either include them or remove the dependency array.",["163"],"'Divider' is defined but never used.","'Button' is defined but never used.","'Dragger' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadBannerImages'. Either include it or remove the dependency array.",["164"],"'Image' is defined but never used.","'UploadOutlined' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},"Update the dependencies array to be: [persistUser]",{"range":"177","text":"178"},"Update the dependencies array to be: [history, user]",{"range":"179","text":"180"},"Update the dependencies array to be: [verifyEmail]",{"range":"181","text":"182"},"Update the dependencies array to be: [fetchCategories]",{"range":"183","text":"184"},"Update the dependencies array to be: [fetchCategories, fetchSubCategories]",{"range":"185","text":"186"},"Update the dependencies array to be: [loadBannerImages]",{"range":"187","text":"188"},[2684,2686],"[persistUser]",[2998,3004],"[history, user]",[2088,2090],"[verifyEmail]",[3483,3485],"[fetchCategories]",[4662,4664],"[fetchCategories, fetchSubCategories]",[3947,3949],"[loadBannerImages]"]