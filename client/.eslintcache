[{"D:\\React\\techkart\\client\\src\\index.js":"1","D:\\React\\techkart\\client\\src\\reportWebVitals.js":"2","D:\\React\\techkart\\client\\src\\App.js":"3","D:\\React\\techkart\\client\\src\\components\\Navbar\\Navbar.js":"4","D:\\React\\techkart\\client\\src\\components\\Auth\\Login\\Login.js":"5","D:\\React\\techkart\\client\\src\\components\\Auth\\SignUp\\SignUp.js":"6","D:\\React\\techkart\\client\\src\\utils\\auth-util.js":"7","D:\\React\\techkart\\client\\src\\components\\Auth\\Confirmation\\Confirmation.js":"8","D:\\React\\techkart\\client\\src\\Reducers\\index.js":"9","D:\\React\\techkart\\client\\src\\Reducers\\userReducer.js":"10","D:\\React\\techkart\\client\\src\\components\\LoadingSpinner\\LoadingSpinner.js":"11"},{"size":851,"mtime":1608921113696,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":2565,"mtime":1609010720005,"results":"15","hashOfConfig":"13"},{"size":4002,"mtime":1609013879692,"results":"16","hashOfConfig":"13"},{"size":4270,"mtime":1608924962018,"results":"17","hashOfConfig":"13"},{"size":3253,"mtime":1608895977051,"results":"18","hashOfConfig":"13"},{"size":912,"mtime":1608924594393,"results":"19","hashOfConfig":"13"},{"size":2175,"mtime":1608906261599,"results":"20","hashOfConfig":"13"},{"size":183,"mtime":1608920381704,"results":"21","hashOfConfig":"13"},{"size":322,"mtime":1608920521970,"results":"22","hashOfConfig":"13"},{"size":210,"mtime":1608973359011,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1c1ievv",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"D:\\React\\techkart\\client\\src\\index.js",[],["50","51"],"D:\\React\\techkart\\client\\src\\reportWebVitals.js",[],"D:\\React\\techkart\\client\\src\\App.js",["52"],"D:\\React\\techkart\\client\\src\\components\\Navbar\\Navbar.js",["53","54"],"D:\\React\\techkart\\client\\src\\components\\Auth\\Login\\Login.js",["55","56","57"],"import React, {useState, useEffect} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Divider, notification, Modal } from 'antd';\r\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\r\nimport {login, resendlink} from '../../../utils/auth-util';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\n\r\nimport '../../Auth/Auth.css';\r\nconst { confirm } = Modal;\r\n\r\nconst Login = ({history}) => {\r\n    const dispatch = useDispatch();\r\n    const {user} = useSelector(state => ({...state}));\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    \r\n    const openNotificationWithIcon = (type, msgTitle, msgBody)  => {\r\n        notification[type]({\r\n          message: msgTitle,\r\n          description: msgBody\r\n        });\r\n    };\r\n\r\n    const showConfirm = (content) => {\r\n        confirm({\r\n          title: 'Email verification failed',\r\n          icon: <ExclamationCircleOutlined />,\r\n          content: content,\r\n          centered: true,\r\n          async onOk() {\r\n            let res;\r\n            try{\r\n                res = await resendlink(email);\r\n                openNotificationWithIcon('success','Email verification link resent', 'Email verification link has been sent to your email.');\r\n                history.push(\"/login\");\r\n            }\r\n            catch(err){\r\n                setLoading(false);\r\n                openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n            }\r\n          },\r\n          onCancel() {\r\n            console.log('Cancel');\r\n          },\r\n        });\r\n      }\r\n    \r\n    const loginHandler = async(e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        let res;\r\n        try{\r\n            res = await login(email, password);\r\n            // openNotificationWithIcon('success',res.data.name, res.data.token);\r\n            localStorage.setItem(\"techkart-user\", JSON.stringify({name: res.data.name, email: res.data.email, authtoken: res.data.token, role: res.data.role, _id: res.data.userId}))\r\n            dispatch({\r\n                type: 'LOGGED_IN',\r\n                payload: {\r\n                  name: res.data.name,\r\n                  email: res.data.email,\r\n                  authtoken: res.data.token,\r\n                  role: res.data.role,\r\n                  _id: res.data.userId\r\n                }\r\n            });\r\n            history.push(\"/\");\r\n        }\r\n        catch(err){\r\n            setLoading(false);\r\n            if(err.response.data.msg === \"Your Email has not been verified.\"){\r\n                showConfirm(`${err.response.data.msg} Do you want to resend email verification link?`);\r\n            }\r\n            else{\r\n                openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(user && user.token){\r\n            history.push(\"/\");\r\n        }\r\n    }, [user])\r\n    return (\r\n        <div className=\"login-signup__container\">\r\n            <form onSubmit={loginHandler}>\r\n                <h1>Sign In</h1>\r\n                <div className=\"login-signup__form-group\">\r\n                    <input type=\"text\" required=\"required\" value={email} onChange={(e) => setEmail(e.target.value)} />\r\n                    <label htmlFor=\"input\" className=\"login-signup__control-label\">Your email</label><i className=\"login-signup__bar\"></i>\r\n                </div>\r\n                <div className=\"login-signup__form-group\">\r\n                    <input type=\"password\" required=\"required\" value={password} onChange={(e) => setPassword(e.target.value)} />\r\n                    <label htmlFor=\"input\" className=\"login-signup__control-label\">Your password</label><i className=\"login-signup__bar\"></i>\r\n                </div>\r\n                <p className=\"login__forgot-password\"><Link to=\"/forgot/password\">Forgot Password?</Link></p>\r\n                <button type=\"submit\" className=\"login-signup__button\" >Sign In</button>\r\n                <Divider />\r\n                <p className=\"login-signup__not-already-member\">Not a member? <Link to=\"/signup\">Sign Up</Link></p>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","D:\\React\\techkart\\client\\src\\components\\Auth\\SignUp\\SignUp.js",["58"],"import React, {useState} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Divider, notification } from 'antd';\r\nimport {signUp} from '../../../utils/auth-util';\r\n\r\nconst SignUp = ({history}) => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    \r\n    const openNotificationWithIcon = (type, msgTitle, msgBody)  => {\r\n        notification[type]({\r\n          message: msgTitle,\r\n          description: msgBody\r\n        });\r\n    };\r\n    \r\n    const signUpHandler = async(e) => {\r\n        e.preventDefault();\r\n        if(password !== confirmPassword){\r\n            openNotificationWithIcon('error',\"Password mismatch\", \"Password and confirm password do not match.\");\r\n            setLoading(false);\r\n            return;\r\n        }\r\n        setLoading(true);\r\n        let res;\r\n        try{\r\n            res = await signUp(name, email, password);\r\n            openNotificationWithIcon('success',res.data.statusText, res.data);\r\n            history.push(\"/login\");\r\n        }\r\n        catch(err){\r\n            setLoading(false);\r\n            openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"login-signup__container signup__container\">\r\n            <form onSubmit={signUpHandler}>\r\n                <h1>Sign Up</h1>\r\n                <div className=\"login-signup__form-group\">\r\n                    <input type=\"text\" required=\"required\" value={name} onChange={(e) => setName(e.target.value)}/>\r\n                    <label htmlFor=\"input\" className=\"login-signup__control-label\">Your name</label><i className=\"login-signup__bar\"></i>\r\n                </div>\r\n                <div className=\"login-signup__form-group\">\r\n                    <input type=\"text\" required=\"required\" value={email} onChange={(e) => setEmail(e.target.value)} />\r\n                    <label htmlFor=\"input\" className=\"login-signup__control-label\">Your email</label><i className=\"login-signup__bar\"></i>\r\n                </div>\r\n                <div className=\"login-signup__form-group\">\r\n                    <input type=\"password\" required=\"required\" value={password} onChange={(e) => setPassword(e.target.value)} />\r\n                    <label htmlFor=\"input\" className=\"login-signup__control-label\">Your password</label><i className=\"login-signup__bar\"></i>\r\n                </div>\r\n                <div className=\"login-signup__form-group\">\r\n                    <input type=\"password\" required=\"required\" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)}/>\r\n                    <label htmlFor=\"input\" className=\"login-signup__control-label\">Confirm password</label><i className=\"login-signup__bar\"></i>\r\n                </div>\r\n                <button type=\"submit\" className=\"login-signup__button\">Sign Up</button>\r\n                <Divider />\r\n                <p className=\"login-signup__not-already-member\">Already a member? <Link to=\"/login\">Sign In</Link></p>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUp;","D:\\React\\techkart\\client\\src\\utils\\auth-util.js",[],"D:\\React\\techkart\\client\\src\\components\\Auth\\Confirmation\\Confirmation.js",["59","60","61","62"],"import React, {useEffect, useState} from 'react';\r\nimport {confirmation, resendlink} from '../../../utils/auth-util';\r\nimport { notification, Modal } from 'antd';\r\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\r\n\r\nconst { confirm } = Modal;\r\n\r\nconst Confirmation = ({history, match}) => {\r\n    const openNotificationWithIcon = (type, msgTitle, msgBody)  => {\r\n        notification[type]({\r\n          message: msgTitle,\r\n          description: msgBody\r\n        });\r\n    };\r\n\r\n    const verifyEmail = async() => {\r\n        let res;\r\n        try{\r\n            res = await confirmation(match.params.email, match.params.token);\r\n            openNotificationWithIcon('success', 'Email verification successful', 'Your email address has been verified succesfully.');\r\n            history.push(\"/\");\r\n        }\r\n        catch(err){\r\n            if(err.response.status === 400){\r\n                showConfirm(`${err.response.data.msg} Do you want to resend email verification link?`);\r\n            }\r\n            else{\r\n                openNotificationWithIcon('error', 'Email verification failed', err.response.data.msg);\r\n                history.push(\"/login\");\r\n            }\r\n        }\r\n    }\r\n\r\n    const showConfirm = (content) => {\r\n        confirm({\r\n          title: 'Email verification failed',\r\n          icon: <ExclamationCircleOutlined />,\r\n          content: content,\r\n          centered: true,\r\n          async onOk() {\r\n            let res;\r\n            try{\r\n                res = await resendlink(match.params.email);\r\n                openNotificationWithIcon('success','Email verification link resent', 'Email verification link has been sent to your email.');\r\n                history.push(\"/login\");\r\n            }\r\n            catch(err){\r\n                openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n                history.push('/login');\r\n            }\r\n          },\r\n          onCancel() {\r\n            history.push('/login');\r\n          },\r\n        });\r\n      }\r\n\r\n    useEffect(() => {\r\n        verifyEmail();\r\n    }, []);\r\n    return (\r\n        <>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Confirmation;\r\n","D:\\React\\techkart\\client\\src\\Reducers\\index.js",[],"D:\\React\\techkart\\client\\src\\Reducers\\userReducer.js",[],"D:\\React\\techkart\\client\\src\\components\\LoadingSpinner\\LoadingSpinner.js",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":67,"column":6,"nodeType":"69","endLine":67,"endColumn":8,"suggestions":"70"},{"ruleId":"71","severity":1,"message":"72","line":10,"column":13,"nodeType":"73","messageId":"74","endLine":10,"endColumn":19},{"ruleId":"71","severity":1,"message":"75","line":11,"column":11,"nodeType":"73","messageId":"74","endLine":11,"endColumn":19},{"ruleId":"71","severity":1,"message":"76","line":16,"column":12,"nodeType":"73","messageId":"74","endLine":16,"endColumn":19},{"ruleId":"71","severity":1,"message":"77","line":34,"column":17,"nodeType":"73","messageId":"74","endLine":34,"endColumn":20},{"ruleId":"67","severity":1,"message":"78","line":84,"column":8,"nodeType":"69","endLine":84,"endColumn":14,"suggestions":"79"},{"ruleId":"71","severity":1,"message":"76","line":11,"column":12,"nodeType":"73","messageId":"74","endLine":11,"endColumn":19},{"ruleId":"71","severity":1,"message":"80","line":1,"column":27,"nodeType":"73","messageId":"74","endLine":1,"endColumn":35},{"ruleId":"71","severity":1,"message":"77","line":19,"column":13,"nodeType":"73","messageId":"74","endLine":19,"endColumn":16},{"ruleId":"71","severity":1,"message":"77","line":43,"column":17,"nodeType":"73","messageId":"74","endLine":43,"endColumn":20},{"ruleId":"67","severity":1,"message":"81","line":60,"column":8,"nodeType":"69","endLine":60,"endColumn":10,"suggestions":"82"},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'persistUser'. Either include it or remove the dependency array.","ArrayExpression",["85"],"no-unused-vars","'Search' is assigned a value but never used.","Identifier","unusedVar","'onSearch' is assigned a value but never used.","'loading' is assigned a value but never used.","'res' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["86"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'verifyEmail'. Either include it or remove the dependency array.",["87"],"no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},{"desc":"92","fix":"93"},"Update the dependencies array to be: [persistUser]",{"range":"94","text":"95"},"Update the dependencies array to be: [history, user]",{"range":"96","text":"97"},"Update the dependencies array to be: [verifyEmail]",{"range":"98","text":"99"},[2189,2191],"[persistUser]",[2998,3004],"[history, user]",[2088,2090],"[verifyEmail]"]