[{"D:\\React\\techkart\\client\\src\\index.js":"1","D:\\React\\techkart\\client\\src\\reportWebVitals.js":"2","D:\\React\\techkart\\client\\src\\App.js":"3","D:\\React\\techkart\\client\\src\\components\\Navbar\\Navbar.js":"4","D:\\React\\techkart\\client\\src\\components\\Auth\\Login\\Login.js":"5","D:\\React\\techkart\\client\\src\\components\\Auth\\SignUp\\SignUp.js":"6","D:\\React\\techkart\\client\\src\\utils\\auth-util.js":"7","D:\\React\\techkart\\client\\src\\components\\Auth\\Confirmation\\Confirmation.js":"8","D:\\React\\techkart\\client\\src\\Reducers\\index.js":"9","D:\\React\\techkart\\client\\src\\Reducers\\userReducer.js":"10","D:\\React\\techkart\\client\\src\\components\\LoadingSpinner\\LoadingSpinner.js":"11","D:\\React\\techkart\\client\\src\\components\\AdminDashboard\\AdminLeftNav.js":"12","D:\\React\\techkart\\client\\src\\utils\\categories.js":"13","D:\\React\\techkart\\client\\src\\components\\Routes\\AdminRoute.js":"14","D:\\React\\techkart\\client\\src\\components\\Routes\\UserRoute.js":"15","D:\\React\\techkart\\client\\src\\pages\\ManageCategory.js":"16","D:\\React\\techkart\\client\\src\\pages\\ManageSubCategories.js":"17","D:\\React\\techkart\\client\\src\\pages\\ManageProducts.js":"18","D:\\React\\techkart\\client\\src\\pages\\ManageBannerImages.js":"19"},{"size":851,"mtime":1608921113696,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"22","hashOfConfig":"21"},{"size":3392,"mtime":1609078335227,"results":"23","hashOfConfig":"21"},{"size":4002,"mtime":1609013879692,"results":"24","hashOfConfig":"21"},{"size":4270,"mtime":1608924962018,"results":"25","hashOfConfig":"21"},{"size":3253,"mtime":1608895977051,"results":"26","hashOfConfig":"21"},{"size":908,"mtime":1609049648146,"results":"27","hashOfConfig":"21"},{"size":2175,"mtime":1608906261599,"results":"28","hashOfConfig":"21"},{"size":183,"mtime":1608920381704,"results":"29","hashOfConfig":"21"},{"size":322,"mtime":1608920521970,"results":"30","hashOfConfig":"21"},{"size":210,"mtime":1608973359011,"results":"31","hashOfConfig":"21"},{"size":1302,"mtime":1609077673377,"results":"32","hashOfConfig":"21"},{"size":1008,"mtime":1609064657966,"results":"33","hashOfConfig":"21"},{"size":480,"mtime":1609066367328,"results":"34","hashOfConfig":"21"},{"size":484,"mtime":1609066371704,"results":"35","hashOfConfig":"21"},{"size":7939,"mtime":1609076169578,"results":"36","hashOfConfig":"21"},{"size":970,"mtime":1609078723327,"results":"37","hashOfConfig":"21"},{"size":530,"mtime":1609078345526,"results":"38","hashOfConfig":"21"},{"size":538,"mtime":1609078213921,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1c1ievv",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\React\\techkart\\client\\src\\index.js",[],["84","85"],"D:\\React\\techkart\\client\\src\\reportWebVitals.js",[],"D:\\React\\techkart\\client\\src\\App.js",["86","87","88"],"D:\\React\\techkart\\client\\src\\components\\Navbar\\Navbar.js",["89","90"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {useSelector} from 'react-redux';\r\nimport { Popover, Button, Divider, Input, Badge } from 'antd';\r\nimport { UserOutlined, ShoppingCartOutlined, HeartOutlined, FundOutlined, SearchOutlined, LogoutOutlined } from '@ant-design/icons';\r\n\r\nimport './Navbar.css';\r\n\r\nconst Navbar = () => {\r\n    const { Search } = Input;\r\n    const onSearch = value => console.log(value);\r\n    const {user} = useSelector(state => ({...state}));\r\n    \r\n    const loginContent = (\r\n        <div className=\"navbar__signup-container\">\r\n          <div className=\"navbar__signup\">\r\n              <strong>New customer?</strong>\r\n              <Link to=\"/signup\">Sign Up</Link>\r\n          </div>\r\n          <Divider /> \r\n          <Button type=\"text\" icon={<UserOutlined />}>My Profile</Button>\r\n          <Divider />\r\n          <Button type=\"text\" icon={<FundOutlined />}>Orders</Button>\r\n        </div>\r\n    );\r\n    \r\n    let loggedInContent;\r\n    if(user !== null){\r\n        loggedInContent = (\r\n            <div className=\"navbar__signup-container\">\r\n                <label className=\"navbar__username\">Hello {user.name.split(' ')[0]}</label>\r\n                <Divider /> \r\n                <Button type=\"text\" icon={<UserOutlined />}>My Profile</Button>\r\n                <Divider />\r\n                <Button type=\"text\" icon={<FundOutlined />}>Orders</Button>\r\n                <Divider />\r\n                <Button type=\"text\" icon={<LogoutOutlined />}>Logout</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const profileDiv = (\r\n        <div className=\"navbar__menu\">\r\n            <div className=\"navbar__menu__icon-wrapper\"><UserOutlined className=\"navbar__menu__icon\"/></div>\r\n            <div className=\"navbar__menu_text\"><label>Profile</label></div>\r\n        </div>\r\n    );\r\n\r\n    \r\n\r\n    return (\r\n        <div className=\"navbar__container\">\r\n            <nav className=\"navbar__nav\">\r\n                <div className=\"navbar__brand-wrapper\">\r\n                    <Link to=\"/\" className=\"navbar__brand\">TechKart\r\n                        <Input placeholder=\"Search for products, brands and more\" suffix={<SearchOutlined />} className=\"navbar__search\" />\r\n                    </Link>\r\n                </div>\r\n                <div className=\"navbar__links-wrapper\">\r\n                    <ul className=\"navbar__links\">\r\n                        <li>\r\n                            {user === null ? <Popover content={loginContent} placement=\"bottom\">\r\n                                <Button type=\"secondary\" shape=\"square\" size=\"Medium\">\r\n                                    <Link to=\"/login\">Login</Link>\r\n                                </Button>\r\n                                </Popover> : <Popover content={loggedInContent} placement=\"bottom\">\r\n                                    {profileDiv}\r\n                                </Popover>}\r\n                        </li>\r\n                        <li>\r\n                            <div className=\"navbar__menu\">\r\n                                <div className=\"navbar__menu__icon-wrapper\"><HeartOutlined className=\"navbar__menu__icon\" /></div>\r\n                                <div className=\"navbar__menu_text\"><label>Wishlist</label></div>\r\n                            </div>\r\n                        </li>\r\n                        <li>\r\n                            <Badge count={0} size=\"small\">\r\n                                <div className=\"navbar__menu\">\r\n                                    <div className=\"navbar__menu__icon-wrapper\"><ShoppingCartOutlined className=\"navbar__menu__icon\" style={{fontSize: '1.2rem'}}/></div>\r\n                                    <div style={{paddingTop: '3px'}} className=\"navbar__menu_text\"><label>Cart</label></div>\r\n                                </div>\r\n                            </Badge>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;\r\n","D:\\React\\techkart\\client\\src\\components\\Auth\\Login\\Login.js",["91","92","93"],"import React, {useState, useEffect} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Divider, notification, Modal } from 'antd';\r\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\r\nimport {login, resendlink} from '../../../utils/auth-util';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\n\r\nimport '../../Auth/Auth.css';\r\nconst { confirm } = Modal;\r\n\r\nconst Login = ({history}) => {\r\n    const dispatch = useDispatch();\r\n    const {user} = useSelector(state => ({...state}));\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    \r\n    const openNotificationWithIcon = (type, msgTitle, msgBody)  => {\r\n        notification[type]({\r\n          message: msgTitle,\r\n          description: msgBody\r\n        });\r\n    };\r\n\r\n    const showConfirm = (content) => {\r\n        confirm({\r\n          title: 'Email verification failed',\r\n          icon: <ExclamationCircleOutlined />,\r\n          content: content,\r\n          centered: true,\r\n          async onOk() {\r\n            let res;\r\n            try{\r\n                res = await resendlink(email);\r\n                openNotificationWithIcon('success','Email verification link resent', 'Email verification link has been sent to your email.');\r\n                history.push(\"/login\");\r\n            }\r\n            catch(err){\r\n                setLoading(false);\r\n                openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n            }\r\n          },\r\n          onCancel() {\r\n            console.log('Cancel');\r\n          },\r\n        });\r\n      }\r\n    \r\n    const loginHandler = async(e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        let res;\r\n        try{\r\n            res = await login(email, password);\r\n            // openNotificationWithIcon('success',res.data.name, res.data.token);\r\n            localStorage.setItem(\"techkart-user\", JSON.stringify({name: res.data.name, email: res.data.email, authtoken: res.data.token, role: res.data.role, _id: res.data.userId}))\r\n            dispatch({\r\n                type: 'LOGGED_IN',\r\n                payload: {\r\n                  name: res.data.name,\r\n                  email: res.data.email,\r\n                  authtoken: res.data.token,\r\n                  role: res.data.role,\r\n                  _id: res.data.userId\r\n                }\r\n            });\r\n            history.push(\"/\");\r\n        }\r\n        catch(err){\r\n            setLoading(false);\r\n            if(err.response.data.msg === \"Your Email has not been verified.\"){\r\n                showConfirm(`${err.response.data.msg} Do you want to resend email verification link?`);\r\n            }\r\n            else{\r\n                openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(user && user.token){\r\n            history.push(\"/\");\r\n        }\r\n    }, [user])\r\n    return (\r\n        <div className=\"login-signup__container\">\r\n            <form onSubmit={loginHandler}>\r\n                <h1>Sign In</h1>\r\n                <div className=\"login-signup__form-group\">\r\n                    <input type=\"text\" required=\"required\" value={email} onChange={(e) => setEmail(e.target.value)} />\r\n                    <label htmlFor=\"input\" className=\"login-signup__control-label\">Your email</label><i className=\"login-signup__bar\"></i>\r\n                </div>\r\n                <div className=\"login-signup__form-group\">\r\n                    <input type=\"password\" required=\"required\" value={password} onChange={(e) => setPassword(e.target.value)} />\r\n                    <label htmlFor=\"input\" className=\"login-signup__control-label\">Your password</label><i className=\"login-signup__bar\"></i>\r\n                </div>\r\n                <p className=\"login__forgot-password\"><Link to=\"/forgot/password\">Forgot Password?</Link></p>\r\n                <button type=\"submit\" className=\"login-signup__button\" >Sign In</button>\r\n                <Divider />\r\n                <p className=\"login-signup__not-already-member\">Not a member? <Link to=\"/signup\">Sign Up</Link></p>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","D:\\React\\techkart\\client\\src\\components\\Auth\\SignUp\\SignUp.js",["94"],"import React, {useState} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Divider, notification } from 'antd';\r\nimport {signUp} from '../../../utils/auth-util';\r\n\r\nconst SignUp = ({history}) => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    \r\n    const openNotificationWithIcon = (type, msgTitle, msgBody)  => {\r\n        notification[type]({\r\n          message: msgTitle,\r\n          description: msgBody\r\n        });\r\n    };\r\n    \r\n    const signUpHandler = async(e) => {\r\n        e.preventDefault();\r\n        if(password !== confirmPassword){\r\n            openNotificationWithIcon('error',\"Password mismatch\", \"Password and confirm password do not match.\");\r\n            setLoading(false);\r\n            return;\r\n        }\r\n        setLoading(true);\r\n        let res;\r\n        try{\r\n            res = await signUp(name, email, password);\r\n            openNotificationWithIcon('success',res.data.statusText, res.data);\r\n            history.push(\"/login\");\r\n        }\r\n        catch(err){\r\n            setLoading(false);\r\n            openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"login-signup__container signup__container\">\r\n            <form onSubmit={signUpHandler}>\r\n                <h1>Sign Up</h1>\r\n                <div className=\"login-signup__form-group\">\r\n                    <input type=\"text\" required=\"required\" value={name} onChange={(e) => setName(e.target.value)}/>\r\n                    <label htmlFor=\"input\" className=\"login-signup__control-label\">Your name</label><i className=\"login-signup__bar\"></i>\r\n                </div>\r\n                <div className=\"login-signup__form-group\">\r\n                    <input type=\"text\" required=\"required\" value={email} onChange={(e) => setEmail(e.target.value)} />\r\n                    <label htmlFor=\"input\" className=\"login-signup__control-label\">Your email</label><i className=\"login-signup__bar\"></i>\r\n                </div>\r\n                <div className=\"login-signup__form-group\">\r\n                    <input type=\"password\" required=\"required\" value={password} onChange={(e) => setPassword(e.target.value)} />\r\n                    <label htmlFor=\"input\" className=\"login-signup__control-label\">Your password</label><i className=\"login-signup__bar\"></i>\r\n                </div>\r\n                <div className=\"login-signup__form-group\">\r\n                    <input type=\"password\" required=\"required\" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)}/>\r\n                    <label htmlFor=\"input\" className=\"login-signup__control-label\">Confirm password</label><i className=\"login-signup__bar\"></i>\r\n                </div>\r\n                <button type=\"submit\" className=\"login-signup__button\">Sign Up</button>\r\n                <Divider />\r\n                <p className=\"login-signup__not-already-member\">Already a member? <Link to=\"/login\">Sign In</Link></p>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUp;","D:\\React\\techkart\\client\\src\\utils\\auth-util.js",[],"D:\\React\\techkart\\client\\src\\components\\Auth\\Confirmation\\Confirmation.js",["95","96","97","98"],"import React, {useEffect, useState} from 'react';\r\nimport {confirmation, resendlink} from '../../../utils/auth-util';\r\nimport { notification, Modal } from 'antd';\r\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\r\n\r\nconst { confirm } = Modal;\r\n\r\nconst Confirmation = ({history, match}) => {\r\n    const openNotificationWithIcon = (type, msgTitle, msgBody)  => {\r\n        notification[type]({\r\n          message: msgTitle,\r\n          description: msgBody\r\n        });\r\n    };\r\n\r\n    const verifyEmail = async() => {\r\n        let res;\r\n        try{\r\n            res = await confirmation(match.params.email, match.params.token);\r\n            openNotificationWithIcon('success', 'Email verification successful', 'Your email address has been verified succesfully.');\r\n            history.push(\"/\");\r\n        }\r\n        catch(err){\r\n            if(err.response.status === 400){\r\n                showConfirm(`${err.response.data.msg} Do you want to resend email verification link?`);\r\n            }\r\n            else{\r\n                openNotificationWithIcon('error', 'Email verification failed', err.response.data.msg);\r\n                history.push(\"/login\");\r\n            }\r\n        }\r\n    }\r\n\r\n    const showConfirm = (content) => {\r\n        confirm({\r\n          title: 'Email verification failed',\r\n          icon: <ExclamationCircleOutlined />,\r\n          content: content,\r\n          centered: true,\r\n          async onOk() {\r\n            let res;\r\n            try{\r\n                res = await resendlink(match.params.email);\r\n                openNotificationWithIcon('success','Email verification link resent', 'Email verification link has been sent to your email.');\r\n                history.push(\"/login\");\r\n            }\r\n            catch(err){\r\n                openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n                history.push('/login');\r\n            }\r\n          },\r\n          onCancel() {\r\n            history.push('/login');\r\n          },\r\n        });\r\n      }\r\n\r\n    useEffect(() => {\r\n        verifyEmail();\r\n    }, []);\r\n    return (\r\n        <>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Confirmation;\r\n","D:\\React\\techkart\\client\\src\\Reducers\\index.js",[],"D:\\React\\techkart\\client\\src\\Reducers\\userReducer.js",[],"D:\\React\\techkart\\client\\src\\components\\LoadingSpinner\\LoadingSpinner.js",[],"D:\\React\\techkart\\client\\src\\components\\AdminDashboard\\AdminLeftNav.js",[],"D:\\React\\techkart\\client\\src\\utils\\categories.js",[],"D:\\React\\techkart\\client\\src\\components\\Routes\\AdminRoute.js",[],"D:\\React\\techkart\\client\\src\\components\\Routes\\UserRoute.js",[],"D:\\React\\techkart\\client\\src\\pages\\ManageCategory.js",["99","100","101","102","103"],"import React, {useEffect, useState} from 'react';\r\nimport {Row, Col, PageHeader, Input, Button, List, Card, Divider, notification, Popconfirm, Modal} from 'antd';\r\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons';\r\nimport AdminLeftNav from '../components/AdminDashboard/AdminLeftNav';\r\nimport {create, fetchAll, update, remove} from '../utils/categories';\r\nimport {useSelector} from 'react-redux';\r\n\r\nconst ManageCategory = () => {\r\n    const [category, setCategory] = useState('');\r\n    const [updateCategory, setUpdateCategory] = useState({});\r\n    const [categories, setCategories] = useState([]);\r\n    const {user} = useSelector(state => ({...state}));\r\n    const [visible, setVisible] = useState(false);\r\n    const [confirmLoading, setConfirmLoading] = useState(false);\r\n\r\n    const {email, authtoken} = user;\r\n    const openNotificationWithIcon = (type, msgTitle, msgBody)  => {\r\n        notification[type]({\r\n          message: msgTitle,\r\n          description: msgBody\r\n        });\r\n    };\r\n\r\n    const createCategoryHandler = async(e) => {\r\n        e.preventDefault();\r\n        if(category.length < 2) return openNotificationWithIcon('error','Category Length Error', 'Please ensure that the category name has at least 2 characters');\r\n        try{\r\n            const newCategory = await create(category, email, authtoken);\r\n            fetchCategories();\r\n            setCategory('');\r\n            openNotificationWithIcon('success','Category Created', `${newCategory.data.category} created successfully!`)\r\n        }\r\n        catch(err){\r\n            openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n        }\r\n    }\r\n\r\n    const updateCategoryHandler = async(e) => {\r\n        e.preventDefault();\r\n        if(updateCategory.length < 2) return openNotificationWithIcon('error','Category Length Error', 'Please ensure that the category name has at least 2 characters');\r\n        setConfirmLoading(true);\r\n        try{\r\n            const category = await update(updateCategory.name, email, authtoken, updateCategory.slug);\r\n            fetchCategories();\r\n            setUpdateCategory({});\r\n            openNotificationWithIcon('success','Category Updated', `${category.data.category} updated successfully!`)\r\n        }\r\n        catch(err){\r\n\r\n        }\r\n        setVisible(false);\r\n        setConfirmLoading(false);\r\n    }\r\n\r\n    const fetchCategories = async() => {\r\n        try{\r\n            const categories = await fetchAll();\r\n            console.log(categories.data);\r\n            setCategories(categories.data);\r\n        }\r\n        catch(err){\r\n            openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n        }\r\n    }\r\n\r\n    const removeCategoryHandler = async(slug) => {\r\n        try{\r\n            const category = await remove(authtoken, slug, email);\r\n            openNotificationWithIcon('success','Category Deleted', `${category.data.msg}!`)\r\n            fetchCategories();\r\n        }\r\n        catch(err){\r\n            openNotificationWithIcon('error',err.response.statusText, err.response.data.msg);\r\n        }\r\n    }\r\n\r\n    const showModal = ({slug, name}) => {\r\n        setVisible(true);\r\n        setUpdateCategory({...updateCategory, slug, name});\r\n    };\r\n    \r\n    const handleOk = () => {\r\n        setConfirmLoading(true);\r\n        setTimeout(() => {\r\n          setVisible(false);\r\n          setConfirmLoading(false);\r\n        }, 2000);\r\n    };\r\n    \r\n    const handleCancel = () => {\r\n        setVisible(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchCategories();\r\n    }, [])\r\n    return (\r\n        <>\r\n        <div className=\"admin__wrapper\">\r\n            <div className=\"admin__leftnav\">\r\n                <AdminLeftNav />\r\n            </div>\r\n            <div className=\"admin__content\">\r\n                <Input placeholder=\"Category name\" allowClear value={category} onChange={e => setCategory(e.target.value)}/>\r\n                    <Button type=\"primary\" size=\"medium\" style={{marginTop: '20px'}} onClick={e => createCategoryHandler(e)}>Create</Button>\r\n                    <Divider />\r\n                    <List\r\n                        grid={{\r\n                        gutter: 16,\r\n                        xs: 1,\r\n                        sm: 2,\r\n                        md: 4,\r\n                        lg: 4,\r\n                        xl: 6,\r\n                        xxl: 3,\r\n                        }}\r\n                        dataSource={categories}\r\n                        renderItem={item => (\r\n                        <List.Item>\r\n                            <Card actions={[\r\n                                <EditOutlined key=\"edit\" onClick={() => showModal({slug: item.slug, name:item.name})} />,\r\n                                <Popconfirm\r\n                                    title=\"Are you sure to delete this category?\"\r\n                                    onConfirm={() => removeCategoryHandler(item.slug)}\r\n                                    okText=\"Yes\"\r\n                                    cancelText=\"No\"\r\n                                >\r\n                                    <DeleteOutlined key=\"ellipsis\" />\r\n                                </Popconfirm>,\r\n                            ]}>{item.name}</Card>\r\n                        </List.Item>\r\n                        )}\r\n                    />\r\n            </div>\r\n        </div>\r\n        {/* <Row>\r\n            <Col span={16} offset={4}>\r\n                <PageHeader\r\n                    className=\"site-page-header\"\r\n                    backIcon=\"false\"\r\n                    title=\"Admin Dashboard\"\r\n                />\r\n            </Col>\r\n        </Row> */}\r\n        {/* <Row justify=\"center\">\r\n            <Col span={4}>\r\n                <AdminLeftNav />\r\n            </Col>\r\n            <Col span={12} style={{paddingLeft: '40px'}}>\r\n                <Input placeholder=\"Category name\" allowClear value={category} onChange={e => setCategory(e.target.value)}/>\r\n                <Button type=\"primary\" size=\"medium\" style={{marginTop: '20px'}} onClick={e => createCategoryHandler(e)}>Create</Button>\r\n                <Divider />\r\n                <List\r\n                    grid={{\r\n                    gutter: 16,\r\n                    xs: 1,\r\n                    sm: 2,\r\n                    md: 4,\r\n                    lg: 4,\r\n                    xl: 6,\r\n                    xxl: 3,\r\n                    }}\r\n                    dataSource={categories}\r\n                    renderItem={item => (\r\n                    <List.Item>\r\n                        <Card actions={[\r\n                            <EditOutlined key=\"edit\" onClick={() => showModal({slug: item.slug, name:item.name})} />,\r\n                            <Popconfirm\r\n                                title=\"Are you sure to delete this category?\"\r\n                                onConfirm={() => removeCategoryHandler(item.slug)}\r\n                                okText=\"Yes\"\r\n                                cancelText=\"No\"\r\n                            >\r\n                                <DeleteOutlined key=\"ellipsis\" />\r\n                            </Popconfirm>,\r\n                        ]}>{item.name}</Card>\r\n                    </List.Item>\r\n                    )}\r\n                />\r\n            </Col>\r\n        </Row> */}\r\n        <Modal\r\n            title=\"Update Category\"\r\n            visible={visible}\r\n            // onOk={handleOk}\r\n            confirmLoading={confirmLoading}\r\n            onCancel={handleCancel}\r\n            centered\r\n            footer={null}\r\n        >\r\n            <Input placeholder=\"Category name\" allowClear value={updateCategory.name} onChange={e => setUpdateCategory({...updateCategory, name: e.target.value})}/>\r\n            <Button type=\"primary\" size=\"medium\" style={{marginTop: '20px'}} onClick={e => updateCategoryHandler(e)}>Update</Button>\r\n        </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ManageCategory;\r\n","D:\\React\\techkart\\client\\src\\pages\\ManageSubCategories.js",[],"D:\\React\\techkart\\client\\src\\pages\\ManageProducts.js",["104"],"D:\\React\\techkart\\client\\src\\pages\\ManageBannerImages.js",["105"],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":12,"column":8,"nodeType":"112","messageId":"113","endLine":12,"endColumn":17},{"ruleId":"110","severity":1,"message":"114","line":22,"column":10,"nodeType":"112","messageId":"113","endLine":22,"endColumn":14},{"ruleId":"115","severity":1,"message":"116","line":78,"column":6,"nodeType":"117","endLine":78,"endColumn":8,"suggestions":"118"},{"ruleId":"110","severity":1,"message":"119","line":10,"column":13,"nodeType":"112","messageId":"113","endLine":10,"endColumn":19},{"ruleId":"110","severity":1,"message":"120","line":11,"column":11,"nodeType":"112","messageId":"113","endLine":11,"endColumn":19},{"ruleId":"110","severity":1,"message":"121","line":16,"column":12,"nodeType":"112","messageId":"113","endLine":16,"endColumn":19},{"ruleId":"110","severity":1,"message":"122","line":34,"column":17,"nodeType":"112","messageId":"113","endLine":34,"endColumn":20},{"ruleId":"115","severity":1,"message":"123","line":84,"column":8,"nodeType":"117","endLine":84,"endColumn":14,"suggestions":"124"},{"ruleId":"110","severity":1,"message":"121","line":11,"column":12,"nodeType":"112","messageId":"113","endLine":11,"endColumn":19},{"ruleId":"110","severity":1,"message":"125","line":1,"column":27,"nodeType":"112","messageId":"113","endLine":1,"endColumn":35},{"ruleId":"110","severity":1,"message":"122","line":19,"column":13,"nodeType":"112","messageId":"113","endLine":19,"endColumn":16},{"ruleId":"110","severity":1,"message":"122","line":43,"column":17,"nodeType":"112","messageId":"113","endLine":43,"endColumn":20},{"ruleId":"115","severity":1,"message":"126","line":60,"column":8,"nodeType":"117","endLine":60,"endColumn":10,"suggestions":"127"},{"ruleId":"110","severity":1,"message":"128","line":2,"column":9,"nodeType":"112","messageId":"113","endLine":2,"endColumn":12},{"ruleId":"110","severity":1,"message":"129","line":2,"column":14,"nodeType":"112","messageId":"113","endLine":2,"endColumn":17},{"ruleId":"110","severity":1,"message":"130","line":2,"column":19,"nodeType":"112","messageId":"113","endLine":2,"endColumn":29},{"ruleId":"110","severity":1,"message":"131","line":82,"column":11,"nodeType":"112","messageId":"113","endLine":82,"endColumn":19},{"ruleId":"115","severity":1,"message":"132","line":96,"column":8,"nodeType":"117","endLine":96,"endColumn":10,"suggestions":"133"},{"ruleId":"110","severity":1,"message":"134","line":4,"column":10,"nodeType":"112","messageId":"113","endLine":4,"endColumn":17},{"ruleId":"110","severity":1,"message":"134","line":4,"column":10,"nodeType":"112","messageId":"113","endLine":4,"endColumn":17},"no-native-reassign",["135"],"no-negated-in-lhs",["136"],"no-unused-vars","'UserRoute' is defined but never used.","Identifier","unusedVar","'user' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'persistUser'. Either include it or remove the dependency array.","ArrayExpression",["137"],"'Search' is assigned a value but never used.","'onSearch' is assigned a value but never used.","'loading' is assigned a value but never used.","'res' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["138"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'verifyEmail'. Either include it or remove the dependency array.",["139"],"'Row' is defined but never used.","'Col' is defined but never used.","'PageHeader' is defined but never used.","'handleOk' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchCategories'. Either include it or remove the dependency array.",["140"],"'Divider' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},"Update the dependencies array to be: [persistUser]",{"range":"149","text":"150"},"Update the dependencies array to be: [history, user]",{"range":"151","text":"152"},"Update the dependencies array to be: [verifyEmail]",{"range":"153","text":"154"},"Update the dependencies array to be: [fetchCategories]",{"range":"155","text":"156"},[2657,2659],"[persistUser]",[2998,3004],"[history, user]",[2088,2090],"[verifyEmail]",[3599,3601],"[fetchCategories]"]